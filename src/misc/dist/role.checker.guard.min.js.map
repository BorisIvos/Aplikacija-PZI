{"version":3,"sources":["role.checker.guard.ts"],"names":["common_1","require","RoleCheckedGuard","reflector","this","prototype","canActivate","context","role","switchToHttp","getRequest","token","get","getHandler","includes","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,SAAAC,QAAA,kBAMAC,iBAAA,WACI,SAAAA,EAAoBC,GAAAC,KAAAD,UAAAA,EAoBxB,OAlBID,EAAAG,UAAAC,YAAA,SAAYC,GACR,IACMC,EADgBD,EAAQE,eAAeC,aAC5BC,MAAMH,KAOvB,QAJIJ,KACCD,UACAS,IAAkC,iBAAkBL,EAAQM,cAE7CC,SAASN,IAZxBN,EAAgBa,WAAA,CAD5Bf,SAAAgB,cACYd,GAAb,GAAae,QAAAf,iBAAAA","file":"role.checker.guard.min.js","sourcesContent":["import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\r\nimport { Observable } from \"rxjs\";\r\nimport {Request} from 'express';\r\nimport { Reflector } from \"@nestjs/core\";\r\n\r\n@Injectable()\r\nexport class RoleCheckedGuard implements CanActivate {\r\n    constructor(private reflector: Reflector) { }\r\n\r\n    canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\r\n        const req:  Request = context.switchToHttp().getRequest();\r\n        const role = req.token.role;\r\n\r\n        const allowedToRoles =\r\n            this\r\n            .reflector\r\n            .get<(\"administrator\" | \"user\")[]>('allow_to_roles', context.getHandler());\r\n        \r\n        if (!allowedToRoles.includes(role)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n        // true  - odobravamo izvrsavanje metoda\r\n        // false - ne odobravamo izvrsavanje metoda // throw new HttpExc...\r\n    }\r\n}"]}