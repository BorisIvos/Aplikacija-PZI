{"version":3,"sources":["role.checker.guard.ts"],"names":[],"mappings":";;;;;;;;AAAA,yCAA2E;AAM3E;IACI,0BAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAI,CAAC;IAE7C,sCAAW,GAAX,UAAY,OAAyB;QACjC,IAAM,GAAG,GAAa,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;QAE5B,IAAM,cAAc,GAChB,IAAI;aACH,SAAS;aACT,GAAG,CAA+B,gBAAgB,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QAE/E,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAChC,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;QAEZ,wCAAwC;QACxC,mEAAmE;IACvE,CAAC;IApBQ,gBAAgB;QAD5B,mBAAU,EAAE;OACA,gBAAgB,CAqB5B;IAAD,uBAAC;CArBD,AAqBC,IAAA;AArBY,4CAAgB","file":"role.checker.guard.js","sourcesContent":["import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\r\nimport { Observable } from \"rxjs\";\r\nimport {Request} from 'express';\r\nimport { Reflector } from \"@nestjs/core\";\r\n\r\n@Injectable()\r\nexport class RoleCheckedGuard implements CanActivate {\r\n    constructor(private reflector: Reflector) { }\r\n\r\n    canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\r\n        const req:  Request = context.switchToHttp().getRequest();\r\n        const role = req.token.role;\r\n\r\n        const allowedToRoles =\r\n            this\r\n            .reflector\r\n            .get<(\"administrator\" | \"user\")[]>('allow_to_roles', context.getHandler());\r\n        \r\n        if (!allowedToRoles.includes(role)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n        // true  - odobravamo izvrsavanje metoda\r\n        // false - ne odobravamo izvrsavanje metoda // throw new HttpExc...\r\n    }\r\n}"]}