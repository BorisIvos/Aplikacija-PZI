{"version":3,"sources":["auth.middleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA2E;AAG3E,kCAAoC;AACpC,gDAA8C;AAE9C,wDAAuD;AAGvD;IACI,uBAA6B,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;IAAE,CAAC;IACpE,2BAAG,GAAT,UAAU,GAAY,EAAE,GAAa,EAAE,IAAkB;;;;;;wBAErD,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,EAAC;4BAC3B,MAAM,IAAI,sBAAa,CAAC,iBAAiB,EAAC,mBAAU,CAAC,YAAY,CAAC,CAAC;yBACtE;wBAGK,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;wBAElC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACpC,IAAG,UAAU,CAAC,MAAM,KAAK,CAAC,EAAC;4BACvB,MAAM,IAAI,sBAAa,CAAC,kBAAkB,EAAE,mBAAU,CAAC,YAAY,CAAC,CAAA;yBACvE;wBACK,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC5B,OAAO,GAA2B,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,sBAAS,CAAQ,CAAE;wBAEnF,IAAG,CAAC,OAAO,EAAC;4BACR,MAAM,IAAI,sBAAa,CAAC,kBAAkB,EAAE,mBAAU,CAAC,YAAY,CAAC,CAAA;yBACvE;wBAGK,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;wBAE5B,IAAG,OAAO,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,QAAQ,EAEhC,EAAC;4BACA,MAAM,IAAI,sBAAa,CAAC,kBAAkB,EAAE,mBAAU,CAAC,YAAY,CAAC,CAAC;yBACvE;wBACqB,qBAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAA;;wBAAhF,aAAa,GAAG,SAAgE;wBACtF,IAAG,CAAC,aAAa,EAAC;4BACd,MAAM,IAAI,sBAAa,CAAC,mBAAmB,EAAE,mBAAU,CAAC,YAAY,CAAC,CAAC;yBACzE;wBACK,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;wBACtD,IAAI,iBAAiB,IAAI,OAAO,CAAC,GAAG,EAAE;4BAClC,MAAM,IAAI,sBAAa,CAAC,uBAAuB,EAAC,mBAAU,CAAC,YAAY,CAAC,CAAA;yBAC3E;wBAGD,IAAI,EAAE,CAAC;;;;;KACV;IAzCQ,aAAa;QADzB,uBAAU,EAAE;OACA,aAAa,CA2CzB;IAAD,oBAAC;CA3CD,AA2CC,IAAA;AA3CY,sCAAa","file":"auth.middleware.js","sourcesContent":["import { HttpException, HttpStatus, NestMiddleware } from \"@nestjs/common\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { jwtSecret } from \"config/jwt.secret\";\r\nimport { JwtDataAdministatorDto } from \"src/dtos/administrator/jwt.data.administrator.dto\";\r\nimport { Injectable } from \"@nestjs/common/decorators\";\r\n\r\n@Injectable()\r\nexport class AuthMidleware implements NestMiddleware{\r\n    constructor(private readonly administratorService: AdministratorService){}\r\n    async use(req: Request, res: Response, next: NextFunction) {\r\n        \r\n        if (!req.headers.authorization){\r\n            throw new HttpException('Token not found',HttpStatus.UNAUTHORIZED);\r\n        }\r\n        \r\n\r\n        const token = req.headers.authorization;\r\n\r\n        const tokenParts = token.split(' ');\r\n        if(tokenParts.length !== 2){\r\n            throw new HttpException('Bad token found1', HttpStatus.UNAUTHORIZED)\r\n        }\r\n        const tokenString = tokenParts[1];\r\n        const jwtData: JwtDataAdministatorDto = jwt.verify(tokenString, jwtSecret) as any ;\r\n\r\n        if(!jwtData){\r\n            throw new HttpException('Bad token found2', HttpStatus.UNAUTHORIZED)\r\n        }\r\n\r\n        \r\n        const ip = req.ip.toString();\r\n\r\n         if(jwtData.ip !== req.ip.toString(\r\n            \r\n         )){\r\n           throw new HttpException('Bad token found3', HttpStatus.UNAUTHORIZED);\r\n        }\r\n        const administrator = await this.administratorService.getById(jwtData.administratorId)\r\n        if(!administrator){\r\n            throw new HttpException('Account not found', HttpStatus.UNAUTHORIZED);\r\n        }\r\n        const trenutniTimestamp = new Date().getTime() / 1000;\r\n        if (trenutniTimestamp >= jwtData.ext) {\r\n            throw new HttpException('the token has expired',HttpStatus.UNAUTHORIZED)\r\n        }\r\n\r\n\r\n        next();\r\n    }\r\n    \r\n}"]}