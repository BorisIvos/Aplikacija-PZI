{"version":3,"sources":["auth.middleware.ts"],"names":["common_1","require","jwt","jwt_secret_1","decorators_1","AuthMidleware","administratorService","userService","this","prototype","use","req","res","next","headers","authorization","HttpException","HttpStatus","UNAUTHORIZED","token","tokenParts","split","length","tokenString","jwtData","verify","jwtSecret","e","ip","toString","role","getById","id","_a","sent","Date","getTime","exp","__decorate","Injectable","exports"],"mappings":"+xDAAA,IAAAA,SAAAC,QAAA,kBAGAC,IAAAD,QAAA,gBACAE,aAAAF,QAAA,qBACAG,aAAAH,QAAA,6BAKAI,cAAA,WACI,SAAAA,EACoBC,EACTC,GADSC,KAAAF,qBAAAA,EACTE,KAAAD,YAAAA,EA4Df,OAxDUF,EAAAI,UAAAC,IAAN,SAAUC,EAAcC,EAAeC,yHAEnC,IAAKF,EAAIG,QAAQC,cACb,MAAM,IAAIf,SAAAgB,cAAc,kBAAkBhB,SAAAiB,WAAWC,cAOzD,GAHMC,EAAQR,EAAIG,QAAQC,cAGD,KADnBK,EAAaD,EAAME,MAAM,MACjBC,OACV,MAAM,IAAItB,SAAAgB,cAAc,mBAAoBhB,SAAAiB,WAAWC,cAErDK,EAAcH,EAAW,GAE/B,IACAI,EAAUtB,IAAIuB,OAAOF,EAAapB,aAAAuB,WAC/B,MAAMC,GACL,MAAM,IAAI3B,SAAAgB,cAAc,mBAAoBhB,SAAAiB,WAAWC,cAI3D,IAAIM,EACA,MAAM,IAAIxB,SAAAgB,cAAc,mBAAoBhB,SAAAiB,WAAWC,cAM1D,GAFUP,EAAIiB,GAAGC,WAEdL,EAAQI,KAAOjB,EAAIiB,GAAGC,WAGvB,MAAM,IAAI7B,SAAAgB,cAAc,mBAAoBhB,SAAAiB,WAAWC,oBAGtC,kBAAjBM,EAAQM,KAAR,CAAA,EAAA,GACuB,CAAA,EAAMtB,KAAKF,qBAAqByB,QAAQP,EAAQQ,YACtE,IADsBC,EAAAC,OAElB,MAAM,IAAIlC,SAAAgB,cAAc,oBAAqBhB,SAAAiB,WAAWC,uCAEpC,SAAjBM,EAAQM,KAAR,CAAA,EAAA,GACM,CAAA,EAAMtB,KAAKD,YAAYwB,QAAQP,EAAQQ,YACpD,IADaC,EAAAC,OAET,MAAM,IAAIlC,SAAAgB,cAAc,oBAAqBhB,SAAAiB,WAAWC,+BAKhE,IAD0B,IAAIiB,MAAOC,UAAY,KACxBZ,EAAQa,IAC7B,MAAM,IAAIrC,SAAAgB,cAAc,wBAAwBhB,SAAAiB,WAAWC,qBAI/DL,cA5DKR,EAAaiC,WAAA,CADzBlC,aAAAmC,cACYlC,GAAb,GAAamC,QAAAnC,cAAAA","file":"auth.middleware.min.js","sourcesContent":["import { HttpException, HttpStatus, NestMiddleware } from \"@nestjs/common\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { jwtSecret } from \"config/jwt.secret\";\r\nimport { Injectable } from \"@nestjs/common/decorators\";\r\nimport { JwtDataDto } from \"src/dtos/administrator/auth/jwt.data.dto\";\r\nimport { UserService } from \"src/services/user/user.service\";\r\n\r\n@Injectable()\r\nexport class AuthMidleware implements NestMiddleware{\r\n    constructor(\r\n        public readonly administratorService: AdministratorService,\r\n        public userService: UserService,\r\n\r\n        \r\n        ){}\r\n    async use(req: Request, res: Response, next: NextFunction) {\r\n        \r\n        if (!req.headers.authorization){\r\n            throw new HttpException('Token not found',HttpStatus.UNAUTHORIZED);\r\n        }\r\n        \r\n\r\n        const token = req.headers.authorization;\r\n\r\n        const tokenParts = token.split(' ');\r\n        if(tokenParts.length !== 2){\r\n            throw new HttpException('Bad token found1', HttpStatus.UNAUTHORIZED)\r\n        }\r\n        const tokenString = tokenParts[1];\r\n        let jwtData: JwtDataDto;\r\n        try{  \r\n        jwtData = jwt.verify(tokenString, jwtSecret) as any ;\r\n         } catch(e) {\r\n            throw new HttpException('Bad token found2', HttpStatus.UNAUTHORIZED)\r\n\r\n         }\r\n\r\n        if(!jwtData){\r\n            throw new HttpException('Bad token found2', HttpStatus.UNAUTHORIZED)\r\n        }\r\n\r\n        \r\n        const ip = req.ip.toString();\r\n\r\n         if(jwtData.ip !== req.ip.toString(\r\n            \r\n         )){\r\n           throw new HttpException('Bad token found3', HttpStatus.UNAUTHORIZED);\r\n        }\r\n\r\n        if(jwtData.role === \"administrator\") {  \r\n            const administrator = await this.administratorService.getById(jwtData.id)\r\n            if(!administrator){\r\n                throw new HttpException('Account not found', HttpStatus.UNAUTHORIZED);\r\n        }\r\n        } else if (jwtData.role === \"user\") {\r\n            const user = await this.userService.getById(jwtData.id)\r\n            if(!user){\r\n                throw new HttpException('Account not found', HttpStatus.UNAUTHORIZED);\r\n            }\r\n            \r\n        }\r\n        const trenutniTimestamp = new Date().getTime() / 1000;\r\n        if (trenutniTimestamp >= jwtData.exp) {\r\n            throw new HttpException('the token has expired',HttpStatus.UNAUTHORIZED)\r\n        }\r\n\r\n\r\n        next();\r\n    }\r\n    \r\n}"]}