{"version":3,"sources":["article.service.ts"],"names":["common_1","require","typeorm_1","crud_typeorm_1","article_feuters_entity_1","article_price_1","article_entity_1","api_response_class_1","ArticleService","_super","article","articlePrice","articleFeature","_this","call","this","__extends","prototype","createFullArticle","data","Promise","newArticle","Article","name","categoryId","excerpt","description","save","savedArticle","_b","sent","newArticlePrice","ArticlePrice","articleId","price","_a","features","_i","length","feature","newArticleFeature","ArticleFeature","featureId","value","findOne","relations","editFullArticle","existingArticle","status","isPromoted","ApiResponse","newPriceString","Number","toFixed","lastPrice","articlePrices","lastPriceString","remove","articleFeatures","search","createQueryBuilder","builder","innerJoinAndSelect","leftJoinAndSelect","where","catId","keywords","andWhere","kw","trim","priceMin","min","priceMax","max","fId","fVals","values","orderBy","orderDirection","page","perPage","itemsPerPage","skip","take","getMany","articles","__decorate","Injectable","__param","InjectRepository","TypeOrmCrudService","exports"],"mappings":"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","file":"article.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { TypeOrmCrudService } from \"@nestjsx/crud-typeorm\";\r\nimport { ArticleFeature } from \"src/entities/article-feuters.entity\";\r\nimport { ArticlePrice } from \"src/entities/article-price\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { AddArticleDto } from \"src/dtos/article/add.article.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { Repository } from \"typeorm/repository/Repository\";\r\nimport { EditArticleDto } from \"src/dtos/article/edit.article.dtos\";\r\nimport { last } from \"rxjs\";\r\nimport { ArticleSearchDto } from \"src/dtos/article/article.search.dto\";\r\n\r\n@Injectable()\r\nexport class ArticleService extends TypeOrmCrudService<Article> {\r\n    constructor(\r\n        @InjectRepository(Article)\r\n        private readonly article: Repository<Article>,\r\n        //// Cim se spomene neki repozitori mora se evidentirati u osnovno modulu\r\n        @InjectRepository(ArticlePrice)\r\n        private readonly articlePrice: Repository<ArticlePrice>,\r\n\r\n        @InjectRepository(ArticleFeature)\r\n        private readonly articleFeature: Repository<ArticleFeature>,\r\n    ){\r\n        super(article);\r\n\r\n    }\r\n    async createFullArticle(data: AddArticleDto): Promise<Article | ApiResponse> {\r\n        let newArticle: Article = new Article();\r\n        newArticle.name         = data.name;\r\n        newArticle.categoryId   = data.categoryId;\r\n        newArticle.excerpt      = data.excerpt;\r\n        newArticle.description  = data.description;\r\n\r\n        let savedArticle = await this.article.save(newArticle);\r\n\r\n        let newArticlePrice: ArticlePrice = new ArticlePrice();\r\n        newArticlePrice.articleId = savedArticle.articleId;\r\n        newArticlePrice.price     = data.price;\r\n\r\n        await this.articlePrice.save(newArticlePrice);\r\n\r\n        for (let feature of data.features) {\r\n            let newArticleFeature: ArticleFeature = new ArticleFeature();\r\n            newArticleFeature.articleId = savedArticle.articleId;\r\n            newArticleFeature.featureId = feature.featureId;\r\n            newArticleFeature.value     = feature.value;\r\n\r\n            await this.articleFeature.save(newArticleFeature);\r\n        }\r\n\r\n        return await this.article.findOne(savedArticle.articleId, {\r\n            relations: [\r\n                \"category\",\r\n                \"articleFeatures\",\r\n                \"features\",\r\n                \"articlePrices\",\r\n                \r\n            ]\r\n        });\r\n    }\r\n\r\n    async editFullArticle(articleId: number, data: EditArticleDto): Promise<Article | ApiResponse> {\r\n        const existingArticle: Article = await this.article.findOne(articleId, {\r\n            relations: ['articlePrices']\r\n        });\r\n\r\n        if(!existingArticle){\r\n            return new ApiResponse('error', -5001, 'Article not found.');\r\n        }\r\n\r\n        existingArticle.name        = data.name;\r\n        existingArticle.categoryId  = data.categoryId;\r\n        existingArticle.excerpt     = data.excerpt;\r\n        existingArticle.description = data.description;\r\n        existingArticle.status      = data.status;\r\n        existingArticle.isPromoted  = data.isPromoted;\r\n\r\n        const savedArticle = await this.article.save(existingArticle);\r\n        if(!savedArticle) {\r\n            return new ApiResponse('error', -5002, 'Could not save new article data');\r\n        }\r\n\r\n        \r\n\r\n        const newPriceString: string = Number(data.price).toFixed(2); /// 50.1 -> 50.10\r\n\r\n        const lastPrice = existingArticle.articlePrices[existingArticle.articlePrices.length-1].price;\r\n\r\n        const lastPriceString: string = Number(lastPrice).toFixed(2);\r\n\r\n        if(newPriceString !== lastPriceString) {\r\n            const newArticlePrice = new ArticlePrice();\r\n            newArticlePrice.articleId = articleId;\r\n            newArticlePrice.price = data.price;\r\n\r\n            const savedArticlePrice = await this.articlePrice.save(newArticlePrice);\r\n            if (!savedArticlePrice) {\r\n                return new ApiResponse( 'error', -5003, 'Could not save the new article price.');\r\n            }\r\n\r\n        }\r\n\r\n        \r\n        if (data.features !== null) {\r\n            await this.articleFeature.remove(existingArticle.articleFeatures);\r\n            for (let feature of data.features) {\r\n                let newArticleFeature: ArticleFeature = new ArticleFeature();\r\n                newArticleFeature.articleId = articleId;\r\n                newArticleFeature.featureId = feature.featureId;\r\n                newArticleFeature.value     = feature.value;\r\n    \r\n                await this.articleFeature.save(newArticleFeature);\r\n            }\r\n    \r\n        }\r\n\r\n        return await this.article.findOne(articleId, {\r\n            relations: [\r\n                \"category\",\r\n                \"articleFeatures\",\r\n                \"features\",\r\n                \"articlePrices\",\r\n                \r\n            ]\r\n        });\r\n        \r\n    }\r\n    async search(data: ArticleSearchDto): Promise<Article[] | ApiResponse> {\r\n        const builder = await this.article.createQueryBuilder(\"article\");\r\n\r\n        builder.innerJoinAndSelect(\r\n            \"article.articlePrices\",\r\n            \"ap\",\r\n            \"ap.createdAt = (SELECT MAX(ap.created_at) FROM article_price AS ap WHERE ap.article_id = article.article_id)\" // ovo nije najbolji nacin u praksi da se uradi\r\n        );\r\n\r\n        // pametnije rjesenje (zahtjeva triger_article_price_ai)\r\n        // \"app.current = 1\r\n\r\n        builder.leftJoinAndSelect(\"article.articleFeatures\", \"af\");\r\n        builder.leftJoinAndSelect(\"article.features\", \"features\");\r\n        builder.leftJoinAndSelect(\"article.photos\", \"photos\");\r\n\r\n        builder.where('article.categoryId = :catId', { catId: data.categoryId });\r\n\r\n        if (data.keywords && data.keywords.length > 0) {\r\n            builder.andWhere(`(\r\n                                article.name LIKE :kw OR\r\n                                article.excerpt LIKE :kw OR\r\n                                article.description LIKE :kw\r\n                              )`,\r\n                              { kw: '%' + data.keywords.trim() + '%' });\r\n        }\r\n\r\n        if (data.priceMin && typeof data.priceMin === 'number') {\r\n            builder.andWhere('ap.price >= :min', { min: data.priceMin });\r\n        }\r\n\r\n        if (data.priceMax && typeof data.priceMax === 'number') {\r\n            builder.andWhere('ap.price <= :max', { max: data.priceMax });\r\n        }\r\n\r\n        if (data.features && data.features.length > 0) {\r\n            for (const feature of data.features) {\r\n                builder.andWhere(\r\n                    'af.featureId = :fId AND af.value IN (:fVals)',\r\n                    {\r\n                        fId: feature.featureId,\r\n                        fVals: feature.values,\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        let orderBy = 'article.name';\r\n        let orderDirection: 'ASC' | 'DESC' = 'ASC';\r\n\r\n        if (data.orderBy) {\r\n            orderBy = data.orderBy;\r\n\r\n            if (orderBy === 'price') {\r\n                orderBy = 'ap.price';\r\n            }\r\n    \r\n            if (orderBy === 'name') {\r\n                orderBy = 'article.name';\r\n            }\r\n        }\r\n\r\n        if (data.orderDirection) {\r\n            orderDirection = data.orderDirection;\r\n        }\r\n\r\n        builder.orderBy(orderBy, orderDirection);\r\n\r\n        let page = 0;\r\n        let perPage: 5 | 10 | 25 | 50 | 75 = 25;\r\n\r\n        if (data.page && typeof data.page === 'number') {\r\n            page = data.page;\r\n        }\r\n\r\n        if (data.itemsPerPage && typeof data.itemsPerPage === 'number') {\r\n            perPage = data.itemsPerPage;\r\n        }\r\n\r\n        builder.skip(page * perPage);\r\n        builder.take(perPage);\r\n        \r\n        let articles = await builder.getMany();\r\n\r\n        if (articles.length === 0) {\r\n            return new ApiResponse(\"ok\", 0, \"No articles found for these search parameters.\");\r\n        }\r\n\r\n        return articles;\r\n\r\n        /*  Ovo je radjeno inicijalno\r\n        let articleIds = await (await builder.getMany()).map(article => article.articleId);\r\n        return await this.article.find({\r\n            where: { articleId: Any(articleIds) },\r\n            relations: [\r\n                \"category\",\r\n                \"articleFeatures\",\r\n                \"features\",\r\n                \"articlePrices\",\r\n                \"photos\"\r\n            ]    \r\n        });\r\n         */\r\n    }\r\n\r\n }\r\n"]}