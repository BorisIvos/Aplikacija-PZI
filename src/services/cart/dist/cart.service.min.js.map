{"version":3,"sources":["cart.service.ts"],"names":["common_1","require","typeorm_1","cart_article_entity_1","cart_entity_1","CartService","cart","cartArticle","this","prototype","getLastActiveCartByUserId","userId","Promise","find","where","order","createdAt","take","relations","carts","_a","sent","length","createNewCartForUser","newCart","Cart","save","addArticleToCart","cartId","articleId","quantity","findOne","record","CartArticle","getById","changeQuantity","newQuantity","cartArticleId","__decorate","Injectable","__param","InjectRepository","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBACAC,UAAAD,QAAA,mBAEAE,sBAAAF,QAAA,oCACAG,cAAAH,QAAA,4BAMAI,YAAA,WACI,SAAAA,EAEqBC,EAGAC,GAHAC,KAAAF,KAAAA,EAGAE,KAAAD,YAAAA,EAoFzB,OAjFUF,EAAAI,UAAAC,0BAAN,SAAgCC,gCAAiBC,QAAO,8EACtC,MAAA,CAAA,EAAMJ,KAAKF,KAAKO,KAAK,CAC/BC,MAAO,CACHH,OAAQA,GAEZI,MAAO,CACHC,UAAW,QAEfC,KAAM,EACNC,UAAW,CAAE,mBAGjB,OAXMC,EAAQC,EAAAC,SAWiB,IAAjBF,EAAMG,OAMD,QAFbhB,EAAOa,EAAM,IAEVJ,MACL,CAAA,EAAO,MAGX,CAAA,EAAOT,GATH,CAAA,EAAO,YAYTD,EAAAI,UAAAc,qBAAN,SAA2BZ,gCAAiBC,QAAO,4EAGxC,OAFDY,EAAgB,IAAIpB,cAAAqB,MAClBd,OAASA,EACV,CAAA,EAAMH,KAAKF,KAAKoB,KAAKF,WAA5B,MAAA,CAAA,EAAOJ,EAAAC,cAGLhB,EAAAI,UAAAkB,iBAAN,SAAuBC,EAAgBC,EAAmBC,gCAAmBlB,QAAO,4EACtD,MAAA,CAAA,EAAMJ,KAAKD,YAAYwB,QAAQ,CACrDH,OAAQA,EACRC,UAAWA,YAYf,OAdIG,EAAsBZ,EAAAC,QAWtBW,EAAOF,UAAYA,IALnBE,EAAS,IAAI7B,sBAAA8B,aACNL,OAASA,EAChBI,EAAOH,UAAYA,EACnBG,EAAOF,SAAWA,GAKtB,CAAA,EAAMtB,KAAKD,YAAYmB,KAAKM,WAE5B,OAFAZ,EAAAC,OAEA,CAAA,EAAOb,KAAK0B,QAAQN,UAGlBvB,EAAAI,UAAAyB,QAAN,SAAcN,gCAAiBhB,QAAO,sEAC3B,MAAA,CAAA,EAAMJ,KAAKF,KAAKyB,QAAQH,EAAQ,CACnCV,UAAW,CACP,OACA,eACA,uBACA,gCACA,gDANR,MAAA,CAAA,EAAOE,EAAAC,cAWLhB,EAAAI,UAAA0B,eAAN,SAAqBP,EAAgBC,EAAmBO,gCAAsBxB,QAAO,4EACvD,MAAA,CAAA,EAAMJ,KAAKD,YAAYwB,QAAQ,CACrDH,OAAQA,EACRC,UAAWA,mBAFXG,EAAsBZ,EAAAC,SAMtBW,EAAOF,SAAWM,EAEM,IAApBJ,EAAOF,SAAP,CAAA,EAAA,GACA,CAAA,EAAMtB,KAAKD,YAAkB,OAACyB,EAAOK,iBAJzC,CAAA,EAAA,iBAIIjB,EAAAC,oBAEA,MAAA,CAAA,EAAMb,KAAKD,YAAYmB,KAAKM,WAA5BZ,EAAAC,wBAID,MAAA,CAAA,EAAMb,KAAK0B,QAAQN,WAA1B,MAAA,CAAA,EAAOR,EAAAC,cAxFFhB,EAAWiC,WAAA,CADvBtC,SAAAuC,aAGQC,QAAA,EAAAtC,UAAAuC,iBAAiBrC,cAAAqB,OAGjBe,QAAA,EAAAtC,UAAAuC,iBAAiBtC,sBAAA8B,eALb5B,GAAb,GAAaqC,QAAArC,YAAAA","file":"cart.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { CartArticle } from \"src/entities/cart-article.entity\";\r\nimport { Cart } from \"src/entities/cart.entity\";\r\nimport { Order } from \"src/entities/order.entity\";\r\nimport { Repository } from \"typeorm\";\r\n\r\n\r\n@Injectable()\r\nexport class CartService {\r\n    constructor(\r\n        @InjectRepository(Cart)\r\n        private readonly cart: Repository<Cart>,\r\n \r\n        @InjectRepository(CartArticle)\r\n        private readonly cartArticle: Repository<CartArticle>,\r\n    ) { }\r\n\r\n    async getLastActiveCartByUserId(userId: number): Promise<Cart | null> {\r\n        const carts = await this.cart.find({\r\n            where: {\r\n                userId: userId,\r\n            },\r\n            order: {\r\n                createdAt: \"DESC\",\r\n            },\r\n            take: 1,\r\n            relations: [ \"order\" ],\r\n        });\r\n\r\n        if (!carts || carts.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const cart = carts[0];\r\n\r\n        if (cart.order !== null) {\r\n            return null;\r\n        }\r\n\r\n        return cart;\r\n    }\r\n\r\n    async createNewCartForUser(userId: number): Promise<Cart> {\r\n        const newCart: Cart = new Cart();\r\n        newCart.userId = userId;\r\n        return await this.cart.save(newCart);\r\n    }\r\n\r\n    async addArticleToCart(cartId: number, articleId: number, quantity: number): Promise<Cart> {\r\n        let record: CartArticle = await this.cartArticle.findOne({\r\n            cartId: cartId,\r\n            articleId: articleId,\r\n        });\r\n\r\n        if (!record) {\r\n            record = new CartArticle();\r\n            record.cartId = cartId;\r\n            record.articleId = articleId;\r\n            record.quantity = quantity;\r\n        } else {\r\n            record.quantity += quantity;\r\n        }\r\n\r\n        await this.cartArticle.save(record);\r\n\r\n        return this.getById(cartId);\r\n    }\r\n\r\n    async getById(cartId: number): Promise<Cart> {\r\n        return await this.cart.findOne(cartId, {\r\n            relations: [\r\n                \"user\",\r\n                \"cartArticles\",\r\n                \"cartArticles.article\",\r\n                \"cartArticles.article.category\",\r\n                \"cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async changeQuantity(cartId: number, articleId: number, newQuantity: number): Promise<Cart> {\r\n        let record: CartArticle = await this.cartArticle.findOne({\r\n            cartId: cartId,\r\n            articleId: articleId,\r\n        });\r\n\r\n        if (record) {\r\n            record.quantity = newQuantity;\r\n\r\n            if (record.quantity === 0) {\r\n                await this.cartArticle.delete(record.cartArticleId);\r\n            } else {\r\n                await this.cartArticle.save(record);\r\n            }\r\n        }\r\n\r\n        return await this.getById(cartId);\r\n    }\r\n}"]}