{"version":3,"sources":["cart.service.ts"],"names":[],"mappings":"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","file":"cart.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { CartArticle } from \"src/entities/cart-article.entity\";\r\nimport { Cart } from \"src/entities/cart.entity\";\r\nimport { Order } from \"src/entities/order.entity\";\r\nimport { Repository } from \"typeorm\";\r\n\r\n\r\n@Injectable()\r\nexport class CartService {\r\n    constructor(\r\n        @InjectRepository(Cart)\r\n        private readonly cart: Repository<Cart>,\r\n \r\n        @InjectRepository(CartArticle)\r\n        private readonly cartArticle: Repository<CartArticle>,\r\n    ) { }\r\n\r\n    async getLastActiveCartByUserId(userId: number): Promise<Cart | null> {\r\n        const carts = await this.cart.find({\r\n            where: {\r\n                userId: userId,\r\n            },\r\n            order: {\r\n                createdAt: \"DESC\",\r\n            },\r\n            take: 1,\r\n            relations: [ \"order\" ],\r\n        });\r\n\r\n        if (!carts || carts.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const cart = carts[0];\r\n\r\n        if (cart.order !== null) {\r\n            return null;\r\n        }\r\n\r\n        return cart;\r\n    }\r\n\r\n    async createNewCartForUser(userId: number): Promise<Cart> {\r\n        const newCart: Cart = new Cart();\r\n        newCart.userId = userId;\r\n        return await this.cart.save(newCart);\r\n    }\r\n\r\n    async addArticleToCart(cartId: number, articleId: number, quantity: number): Promise<Cart> {\r\n        let record: CartArticle = await this.cartArticle.findOne({\r\n            cartId: cartId,\r\n            articleId: articleId,\r\n        });\r\n\r\n        if (!record) {\r\n            record = new CartArticle();\r\n            record.cartId = cartId;\r\n            record.articleId = articleId;\r\n            record.quantity = quantity;\r\n        } else {\r\n            record.quantity += quantity;\r\n        }\r\n\r\n        await this.cartArticle.save(record);\r\n\r\n        return this.getById(cartId);\r\n    }\r\n\r\n    async getById(cartId: number): Promise<Cart> {\r\n        return await this.cart.findOne(cartId, {\r\n            relations: [\r\n                \"user\",\r\n                \"cartArticles\",\r\n                \"cartArticles.article\",\r\n                \"cartArticles.article.category\",\r\n                \"cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async changeQuantity(cartId: number, articleId: number, newQuantity: number): Promise<Cart> {\r\n        let record: CartArticle = await this.cartArticle.findOne({\r\n            cartId: cartId,\r\n            articleId: articleId,\r\n        });\r\n\r\n        if (record) {\r\n            record.quantity = newQuantity;\r\n\r\n            if (record.quantity === 0) {\r\n                await this.cartArticle.delete(record.cartArticleId);\r\n            } else {\r\n                await this.cartArticle.save(record);\r\n            }\r\n        }\r\n\r\n        return await this.getById(cartId);\r\n    }\r\n}"]}