{"version":3,"sources":["order.service.ts"],"names":[],"mappings":"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","file":"order.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { CartArticle } from \"src/entities/cart-article.entity\";\r\nimport { Cart } from \"src/entities/cart.entity\";\r\nimport { Order } from \"src/entities/order.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\n\r\n@Injectable()\r\nexport class OrderService {\r\n    constructor(\r\n        @InjectRepository(Cart)\r\n        private readonly cart: Repository<Cart>,\r\n \r\n        @InjectRepository(Order)\r\n        private readonly order: Repository<Order>,\r\n    ) { }\r\n\r\n    async add(cartId: number): Promise<Order | ApiResponse> {\r\n        const order = await this.order.findOne({\r\n            cartId: cartId,\r\n        });\r\n\r\n        if (order) {\r\n            return new ApiResponse(\"error\", -7001, \"An order for this cart has already been made.\");\r\n        }\r\n\r\n        const cart = await this.cart.findOne(cartId, {\r\n            relations: [\r\n                \"cartArticles\",\r\n            ],\r\n        });\r\n\r\n        if (!cart) {\r\n            return new ApiResponse(\"error\", -7002, \"No such cart found.\");\r\n        }\r\n\r\n        if (cart.cartArticles.length === 0) {\r\n            return new ApiResponse(\"error\", -7003, \"This cart is empty.\");\r\n        }\r\n\r\n        const newOrder: Order = new Order();\r\n        newOrder.cartId = cartId;\r\n        const savedOrder = await this.order.save(newOrder);\r\n\r\n        cart.createdAt = new Date();\r\n        await this.cart.save(cart);\r\n\r\n        return await this.getById(savedOrder.orderId);\r\n    }\r\n\r\n    async getById(orderId: number) {\r\n        return await this.order.findOne(orderId, {\r\n            relations: [\r\n                \"cart\",\r\n                \"cart.user\",\r\n                \"cart.cartArticles\",\r\n                \"cart.cartArticles.article\",\r\n                \"cart.cartArticles.article.category\",\r\n                \"cart.cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async getAllByUserId(userId: number) {\r\n        return await this.order.find({\r\n            where: {\r\n                userId: userId,\r\n            },\r\n            relations: [\r\n                \"cart\",\r\n                \"cart.user\",\r\n                \"cart.cartArticles\",\r\n                \"cart.cartArticles.article\",\r\n                \"cart.cartArticles.article.category\",\r\n                \"cart.cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async getAll() {\r\n        return await this.order.find({\r\n            relations: [\r\n                \"cart\",\r\n                \"cart.user\",\r\n                \"cart.cartArticles\",\r\n                \"cart.cartArticles.article\",\r\n                \"cart.cartArticles.article.category\",\r\n                \"cart.cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async changeStatus(orderId: number, newStatus: \"rejected\" | \"accepted\" | \"shipped\" | \"pending\") {\r\n        const order = await this.getById(orderId);\r\n\r\n        if (!order) {\r\n            return new ApiResponse(\"error\", -9001, \"No such order found!\");\r\n        }\r\n\r\n        order.status = newStatus;\r\n\r\n        await this.order.save(order);\r\n\r\n        return await this.getById(orderId);\r\n    }\r\n}\r\n"]}