{"version":3,"sources":["order.service.ts"],"names":["common_1","require","cart_entity_1","order_entity_1","typeorm_1","api_response_class_1","OrderService","cart","order","this","prototype","add","cartId","Promise","findOne","_a","sent","ApiResponse","relations","cartArticles","length","newOrder","Order","save","savedOrder","createdAt","Date","getById","orderId","getAllByUserId","userId","find","where","getAll","changeStatus","newStatus","status","__decorate","Injectable","__param","InjectRepository","Cart","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBAGAC,cAAAD,QAAA,4BACAE,eAAAF,QAAA,6BAEAG,UAAAH,QAAA,mBACAI,qBAAAJ,QAAA,+BAGAK,aAAA,WACI,SAAAA,EAEqBC,EAGAC,GAHAC,KAAAF,KAAAA,EAGAE,KAAAD,MAAAA,EA2FzB,OAxFUF,EAAAI,UAAAC,IAAN,SAAUC,gCAAiBC,QAAO,gFAChB,MAAA,CAAA,EAAMJ,KAAKD,MAAMM,QAAQ,CACnCF,OAAQA,YAGZ,OAJcG,EAAAC,OAKV,CAAA,EAAO,IAAIX,qBAAAY,YAAY,SAAU,KAAM,kDAG9B,CAAA,EAAMR,KAAKF,KAAKO,QAAQF,EAAQ,CACzCM,UAAW,CACP,0BAIR,OANMX,EAAOQ,EAAAC,QAUoB,IAA7BT,EAAKY,aAAaC,OAClB,CAAA,EAAO,IAAIf,qBAAAY,YAAY,SAAU,KAAM,0BAGrCI,EAAkB,IAAIlB,eAAAmB,OACnBV,OAASA,EACC,CAAA,EAAMH,KAAKD,MAAMe,KAAKF,KATrC,CAAA,EAAO,IAAIhB,qBAAAY,YAAY,SAAU,KAAM,+BAY3C,OAHMO,EAAaT,EAAAC,OAEnBT,EAAKkB,UAAY,IAAIC,KACrB,CAAA,EAAMjB,KAAKF,KAAKgB,KAAKhB,WAEd,OAFPQ,EAAAC,OAEO,CAAA,EAAMP,KAAKkB,QAAQH,EAAWI,iBAArC,MAAA,CAAA,EAAOb,EAAAC,cAGLV,EAAAI,UAAAiB,QAAN,SAAcC,6GACH,MAAA,CAAA,EAAMnB,KAAKD,MAAMM,QAAQc,EAAS,CACrCV,UAAW,CACP,OACA,YACA,oBACA,4BACA,qCACA,qDAPR,MAAA,CAAA,EAAOH,EAAAC,cAYLV,EAAAI,UAAAmB,eAAN,SAAqBC,6GACV,MAAA,CAAA,EAAMrB,KAAKD,MAAMuB,KAAK,CACzBC,MAAO,CACHF,OAAQA,GAEZZ,UAAW,CACP,OACA,YACA,oBACA,4BACA,qCACA,qDAVR,MAAA,CAAA,EAAOH,EAAAC,cAeLV,EAAAI,UAAAuB,OAAN,qHACW,MAAA,CAAA,EAAMxB,KAAKD,MAAMuB,KAAK,CACzBb,UAAW,CACP,OACA,YACA,oBACA,4BACA,qCACA,qDAPR,MAAA,CAAA,EAAOH,EAAAC,cAYLV,EAAAI,UAAAwB,aAAN,SAAmBN,EAAiBO,mHAClB,MAAA,CAAA,EAAM1B,KAAKkB,QAAQC,WAEjC,OAFMpB,EAAQO,EAAAC,SAMdR,EAAM4B,OAASD,EAEf,CAAA,EAAM1B,KAAKD,MAAMe,KAAKf,KALlB,CAAA,EAAO,IAAIH,qBAAAY,YAAY,SAAU,KAAM,gCAOpC,OAFPF,EAAAC,OAEO,CAAA,EAAMP,KAAKkB,QAAQC,WAA1B,MAAA,CAAA,EAAOb,EAAAC,cA/FFV,EAAY+B,WAAA,CADxBrC,SAAAsC,aAGQC,QAAA,EAAAnC,UAAAoC,iBAAiBtC,cAAAuC,OAGjBF,QAAA,EAAAnC,UAAAoC,iBAAiBrC,eAAAmB,SALbhB,GAAb,GAAaoC,QAAApC,aAAAA","file":"order.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { CartArticle } from \"src/entities/cart-article.entity\";\r\nimport { Cart } from \"src/entities/cart.entity\";\r\nimport { Order } from \"src/entities/order.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\n\r\n@Injectable()\r\nexport class OrderService {\r\n    constructor(\r\n        @InjectRepository(Cart)\r\n        private readonly cart: Repository<Cart>,\r\n \r\n        @InjectRepository(Order)\r\n        private readonly order: Repository<Order>,\r\n    ) { }\r\n\r\n    async add(cartId: number): Promise<Order | ApiResponse> {\r\n        const order = await this.order.findOne({\r\n            cartId: cartId,\r\n        });\r\n\r\n        if (order) {\r\n            return new ApiResponse(\"error\", -7001, \"An order for this cart has already been made.\");\r\n        }\r\n\r\n        const cart = await this.cart.findOne(cartId, {\r\n            relations: [\r\n                \"cartArticles\",\r\n            ],\r\n        });\r\n\r\n        if (!cart) {\r\n            return new ApiResponse(\"error\", -7002, \"No such cart found.\");\r\n        }\r\n\r\n        if (cart.cartArticles.length === 0) {\r\n            return new ApiResponse(\"error\", -7003, \"This cart is empty.\");\r\n        }\r\n\r\n        const newOrder: Order = new Order();\r\n        newOrder.cartId = cartId;\r\n        const savedOrder = await this.order.save(newOrder);\r\n\r\n        cart.createdAt = new Date();\r\n        await this.cart.save(cart);\r\n\r\n        return await this.getById(savedOrder.orderId);\r\n    }\r\n\r\n    async getById(orderId: number) {\r\n        return await this.order.findOne(orderId, {\r\n            relations: [\r\n                \"cart\",\r\n                \"cart.user\",\r\n                \"cart.cartArticles\",\r\n                \"cart.cartArticles.article\",\r\n                \"cart.cartArticles.article.category\",\r\n                \"cart.cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async getAllByUserId(userId: number) {\r\n        return await this.order.find({\r\n            where: {\r\n                userId: userId,\r\n            },\r\n            relations: [\r\n                \"cart\",\r\n                \"cart.user\",\r\n                \"cart.cartArticles\",\r\n                \"cart.cartArticles.article\",\r\n                \"cart.cartArticles.article.category\",\r\n                \"cart.cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async getAll() {\r\n        return await this.order.find({\r\n            relations: [\r\n                \"cart\",\r\n                \"cart.user\",\r\n                \"cart.cartArticles\",\r\n                \"cart.cartArticles.article\",\r\n                \"cart.cartArticles.article.category\",\r\n                \"cart.cartArticles.article.articlePrices\",\r\n            ],\r\n        });\r\n    }\r\n\r\n    async changeStatus(orderId: number, newStatus: \"rejected\" | \"accepted\" | \"shipped\" | \"pending\") {\r\n        const order = await this.getById(orderId);\r\n\r\n        if (!order) {\r\n            return new ApiResponse(\"error\", -9001, \"No such order found!\");\r\n        }\r\n\r\n        order.status = newStatus;\r\n\r\n        await this.order.save(order);\r\n\r\n        return await this.getById(orderId);\r\n    }\r\n}\r\n"]}