{"version":3,"sources":["user.service.ts"],"names":["common_1","require","typeorm_1","crud_typeorm_1","user_entity_1","api_response_class_1","crypto","UserService","_super","user","_this","call","this","__extends","prototype","register","data","Promise","passwordHash","createHash","update","password","passwordHashString","digest","toUpperCase","newUser","User","email","forename","surename","phoneNumber","postalAddress","save","savedUser","_a","sent","Error","ApiResponse","__decorate","Injectable","__param","InjectRepository","TypeOrmCrudService","exports"],"mappings":"ktEAAA,IAAAA,SAAAC,QAAA,kBACAC,UAAAD,QAAA,mBACAE,eAAAF,QAAA,yBAEAG,cAAAH,QAAA,4BACAI,qBAAAJ,QAAA,+BAEAK,OAAAL,QAAA,UAGAM,YAAA,SAAAC,GACI,SAAAD,EAEqBE,GAFrB,IAAAC,EAIIF,EAAAG,KAAAC,KAAMH,IAAKG,YAFMF,EAAAD,KAAAA,IA+BzB,OAlCiCI,UAAAN,EAAAC,GAQvBD,EAAAO,UAAAC,SAAN,SAAeC,gCAA4BC,QAAO,mFACxCC,EAAeZ,OAAOa,WAAW,WAC1BC,OAAOJ,EAAKK,UACnBC,EAAqBJ,EAAaK,OAAO,OAAOC,eAEhDC,EAAgB,IAAIrB,cAAAsB,MAClBC,MAAgBX,EAAKW,MAC7BF,EAAQP,aAAgBI,EACxBG,EAAQG,SAAgBZ,EAAKY,SAC7BH,EAAQI,SAAiBb,EAAKa,SAC9BJ,EAAQK,YAAgBd,EAAKc,YAC7BL,EAAQM,cAAgBf,EAAKe,+BAGP,6BAAA,CAAA,EAAMnB,KAAKH,KAAKuB,KAAKP,WAEvC,KAFMQ,EAAYC,EAAAC,QAGd,MAAM,IAAIC,MAAM,IAGpB,MAAA,CAAA,EAAOH,UAEP,gBAAA,CAAA,EAAO,IAAI5B,qBAAAgC,YAAY,SAAU,KAAM,gEA9BtC9B,EAAW+B,WAAA,CADvBtC,SAAAuC,aAGQC,QAAA,EAAAtC,UAAAuC,iBAAiBrC,cAAAsB,QAFbnB,GAAb,CAAiCJ,eAAAuC,oBAApBC,QAAApC,YAAAA","file":"user.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { TypeOrmCrudService } from \"@nestjsx/crud-typeorm\";\r\nimport { UserRegistrationDto } from \"src/dtos/user/user.registration.dto\";\r\nimport { User } from \"src/entities/user.entity\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { Repository } from \"typeorm/repository/Repository\";\r\nimport * as crypto from 'crypto';\r\n\r\n@Injectable()\r\nexport class UserService extends TypeOrmCrudService<User> {\r\n    constructor(\r\n        @InjectRepository(User)\r\n        private readonly user: Repository<User>//// Cim se spomene neki repozitori mora se evidentirati u osnovno modulu\r\n    ){\r\n        super(user);\r\n\r\n    }\r\n    async register(data: UserRegistrationDto): Promise<User | ApiResponse> {\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        const newUser: User = new User();\r\n        newUser.email         = data.email;\r\n        newUser.passwordHash  = passwordHashString;\r\n        newUser.forename      = data.forename;\r\n        newUser.surename       = data.surename;\r\n        newUser.phoneNumber   = data.phoneNumber;\r\n        newUser.postalAddress = data.postalAddress;\r\n\r\n        try {\r\n            const savedUser = await this.user.save(newUser);\r\n\r\n            if (!savedUser) {\r\n                throw new Error('');\r\n            }\r\n\r\n            return savedUser;\r\n        } catch (e) {\r\n            return new ApiResponse('error', -6001, 'This user account cannot be created.');\r\n        }\r\n    }\r\n\r\n}"]}