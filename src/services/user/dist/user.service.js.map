{"version":3,"sources":["user.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA4C;AAC5C,2CAAmD;AACnD,sDAA2D;AAE3D,wDAAgD;AAChD,kEAA0D;AAE1D,+BAAiC;AAGjC;IAAiC,+BAAwB;IACrD,qBAEqB,IAAsB,CAAA,yEAAyE;;QAFpH,YAII,kBAAM,IAAI,CAAC,SAEd;QAJoB,UAAI,GAAJ,IAAI,CAAkB;;IAI3C,CAAC;IACK,8BAAQ,GAAd,UAAe,IAAyB;uCAAG,OAAO;;;;;wBACxC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;wBACjD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAC7B,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;wBAE9D,OAAO,GAAS,IAAI,kBAAI,EAAE,CAAC;wBACjC,OAAO,CAAC,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC;wBACnC,OAAO,CAAC,YAAY,GAAI,kBAAkB,CAAC;wBAC3C,OAAO,CAAC,QAAQ,GAAQ,IAAI,CAAC,QAAQ,CAAC;wBACtC,OAAO,CAAC,QAAQ,GAAS,IAAI,CAAC,QAAQ,CAAC;wBACvC,OAAO,CAAC,WAAW,GAAK,IAAI,CAAC,WAAW,CAAC;wBACzC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;;;;wBAGrB,qBAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;wBAAzC,SAAS,GAAG,SAA6B;wBAE/C,IAAI,CAAC,SAAS,EAAE;4BACZ,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;yBACvB;wBAED,sBAAO,SAAS,EAAC;;;wBAEjB,sBAAO,IAAI,gCAAW,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,sCAAsC,CAAC,EAAC;;;;;KAEtF;IAhCQ,WAAW;QADvB,mBAAU,EAAE;QAGJ,WAAA,0BAAgB,CAAC,kBAAI,CAAC,CAAA;OAFlB,WAAW,CAkCvB;IAAD,kBAAC;CAlCD,AAkCC,CAlCgC,iCAAkB,GAkClD;AAlCY,kCAAW","file":"user.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { TypeOrmCrudService } from \"@nestjsx/crud-typeorm\";\r\nimport { UserRegistrationDto } from \"src/dtos/user/user.registration.dto\";\r\nimport { User } from \"src/entities/user.entity\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { Repository } from \"typeorm/repository/Repository\";\r\nimport * as crypto from 'crypto';\r\n\r\n@Injectable()\r\nexport class UserService extends TypeOrmCrudService<User> {\r\n    constructor(\r\n        @InjectRepository(User)\r\n        private readonly user: Repository<User>//// Cim se spomene neki repozitori mora se evidentirati u osnovno modulu\r\n    ){\r\n        super(user);\r\n\r\n    }\r\n    async register(data: UserRegistrationDto): Promise<User | ApiResponse> {\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        const newUser: User = new User();\r\n        newUser.email         = data.email;\r\n        newUser.passwordHash  = passwordHashString;\r\n        newUser.forename      = data.forename;\r\n        newUser.surename       = data.surename;\r\n        newUser.phoneNumber   = data.phoneNumber;\r\n        newUser.postalAddress = data.postalAddress;\r\n\r\n        try {\r\n            const savedUser = await this.user.save(newUser);\r\n\r\n            if (!savedUser) {\r\n                throw new Error('');\r\n            }\r\n\r\n            return savedUser;\r\n        } catch (e) {\r\n            return new ApiResponse('error', -6001, 'This user account cannot be created.');\r\n        }\r\n    }\r\n\r\n}"]}