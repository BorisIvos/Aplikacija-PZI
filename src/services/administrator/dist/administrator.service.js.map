{"version":3,"sources":["administrator.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAA4C;AAC5C,2CAAmD;AACnD,sEAA8D;AAK9D;IACI,8BAEqB,aAAwC;QAAxC,kBAAa,GAAb,aAAa,CAA2B;IAG3D,CAAC;IACJ,qCAAqC;IACpC,qCAAM,GAAN;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAErC,CAAC;IACD,sCAAO,GAAP,UAAQ,EAAU;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAE1C,CAAC;IAfQ,oBAAoB;QADhC,mBAAU,EAAE;QAGJ,WAAA,0BAAgB,CAAC,oCAAa,CAAC,CAAA;OAF3B,oBAAoB,CAiBhC;IAAD,2BAAC;CAjBD,AAiBC,IAAA;AAjBY,oDAAoB","file":"administrator.service.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Administrator } from \"entities/administrator.entity\";\nimport { identity } from \"rxjs\";\nimport { Repository } from \"typeorm\" ;\n\n@Injectable()\nexport class AdministratorService{\n    constructor(\n        @InjectRepository(Administrator)\n        private readonly administrator: Repository<Administrator>,\n\n\n    ){}\n   //funkcija vraca niz administratora//\n    getAll():Promise<Administrator[]> {\n        return this.administrator.find();\n\n    }\n    getById(id: number): Promise<Administrator>{\n        return this.administrator.findOne(id);\n\n    }\n\n}"]}