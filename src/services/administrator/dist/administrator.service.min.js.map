{"version":3,"sources":["administrator.service.ts"],"names":["common_1","require","typeorm_1","administrator_entity_1","api_response_class_1","AdministratorService","administrator","this","prototype","getAll","find","getById","id","findOne","add","data","_this","passwordHash","createHash","update","password","passwordHashString","digest","toUpperCase","newAdmin","Administrator","username","Promise","resolve","save","then","error","response","ApiResponse","editById","undefined","admin","_a","sent","reslove","crypto","__decorate","Injectable","__param","InjectRepository","arg0","Error","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBACAC,UAAAD,QAAA,mBACAE,uBAAAF,QAAA,iCAIAG,qBAAAH,QAAA,+BAKAI,qBAAA,WACI,SAAAA,EAEqBC,GAAAC,KAAAD,cAAAA,EA6DzB,OAxDID,EAAAG,UAAAC,OAAA,WACI,OAAOF,KAAKD,cAAcI,QAG7BL,EAAAG,UAAAG,QAAA,SAAQC,GACL,OAAOL,KAAKD,cAAcO,QAAQD,IAItCP,EAAAG,UAAAM,IAAA,SAAIC,GAAJ,IAAAC,EAAAT,KAEUU,EADShB,QAAQ,UACKiB,WAAW,UACvCD,EAAaE,OAAOJ,EAAKK,UAEzB,IAAMC,EAAqBJ,EAAaK,OAAO,OAAOC,cAElDC,EAA0B,IAAIrB,uBAAAsB,cAIlC,OAHAD,EAASE,SAAWX,EAAKW,SACzBF,EAASP,aAAeI,EAEjB,IAAIM,QAAQ,SAACC,GACfZ,EAAKV,cAAcuB,KAAKL,GACxBM,KAAK,SAAAf,GAAQ,OAAAa,EAAQb,KAChB,MAAC,SAAAgB,GACH,IAAMC,EAAuB,IAAI5B,qBAAA6B,YAAY,SAAS,MACtDL,EAAQI,QASd3B,EAAAG,UAAA0B,SAAN,SAAetB,EAAaG,gCAA6BY,QAAO,kFACjC,MAAA,CAAA,EAAMpB,KAAKD,cAAcO,QAAQD,WAE5D,YAAWuB,KAFPC,EAAuBC,EAAAC,QAGvB,CAAA,EAAO,IAAIX,QAAQ,SAACY,GAChBA,EAAQ,IAAInC,qBAAA6B,YAAY,SAAS,WAInCO,EAASvC,QAAQ,WACjBgB,EAAeuB,EAAOtB,WAAW,WAC1BC,OAAOJ,EAAKK,UAEnBC,EAAqBJ,EAAaK,OAAO,OAAOC,cAGtDa,EAAMnB,aAAeI,EACrB,CAAA,EAAOd,KAAKD,cAAcuB,KAAKO,WA3D1B/B,EAAoBoC,WAAA,CADhCzC,SAAA0C,aAGQC,QAAA,EAAAzC,UAAA0C,iBAAiBzC,uBAAAsB,iBAFbpB,GAAb,GAkEA,SAASyB,KAAKe,GACV,MAAM,IAAIC,MAAM,6BAnEPC,QAAA1C,qBAAAA","file":"administrator.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Administrator } from \"entities/administrator.entity\";\nimport { resolve } from \"path\";\nimport { AddAdministratorDto } from \"src/dtos/administrator/add.administrator.dto\";\nimport { EditAdministratorDto } from \"src/dtos/administrator/edit.administrator.dto\";\nimport { ApiResponse } from \"src/misc/api.response.class\";\nimport { Repository } from \"typeorm\" ;\n\n\n@Injectable()\nexport class AdministratorService{\n    constructor(\n        @InjectRepository(Administrator)\n        private readonly administrator: Repository<Administrator>,\n\n\n    ){}\n   //funkcija vraca niz administratora//\n    getAll():Promise<Administrator[]> {\n        return this.administrator.find();\n\n    }\n     getById(id: number ): Promise<Administrator>{\n        return this.administrator.findOne(id);\n\n    }\n\n    add(data: AddAdministratorDto): Promise<Administrator | ApiResponse>{\n        const crypto = require('crypto');\n        const passwordHash = crypto.createHash('sha512');\n        passwordHash.update(data.password);\n\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\n\n        let newAdmin: Administrator = new Administrator();\n        newAdmin.username = data.username;\n        newAdmin.passwordHash = passwordHashString;\n\n        return new Promise((resolve) =>{\n             this.administrator.save(newAdmin)\n            .then(data => resolve(data))\n            .catch(error =>{\n                const response:ApiResponse = new ApiResponse(\"error\",-1001)\n                resolve(response);\n\n            });\n            \n        \n        });\n\n    }\n\n    async editById(id : number, data: EditAdministratorDto): Promise<Administrator | ApiResponse>{\n        let admin: Administrator = await this.administrator.findOne(id);\n\n        if(admin===undefined){\n            return new Promise((reslove) =>{\n                reslove(new ApiResponse(\"error\",-1002));\n            })\n        }\n\n        const crypto = require('crypto');\n        const passwordHash = crypto.createHash('sha512');\n        passwordHash.update(data.password);\n\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\n\n\n        admin.passwordHash = passwordHashString;\n        return this.administrator.save(admin);\n    }\n\n    \n\n}\n\nfunction then(arg0: (data: any) => void) {\n    throw new Error(\"Function not implemented.\");\n}\n\n"]}