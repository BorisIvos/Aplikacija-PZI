{"version":3,"sources":["administrator.service.ts"],"names":["common_1","require","typeorm_1","administrator_entity_1","AdministratorService","administrator","this","prototype","getAll","find","getById","id","findOne","__decorate","Injectable","__param","InjectRepository","Administrator","exports"],"mappings":"udAAA,IAAAA,SAAAC,QAAA,kBACAC,UAAAD,QAAA,mBACAE,uBAAAF,QAAA,iCAKAG,qBAAA,WACI,SAAAA,EAEqBC,GAAAC,KAAAD,cAAAA,EAczB,OATID,EAAAG,UAAAC,OAAA,WACI,OAAOF,KAAKD,cAAcI,QAG9BL,EAAAG,UAAAG,QAAA,SAAQC,GACJ,OAAOL,KAAKD,cAAcO,QAAQD,IAb7BP,EAAoBS,WAAA,CADhCb,SAAAc,aAGQC,QAAA,EAAAb,UAAAc,iBAAiBb,uBAAAc,iBAFbb,GAAb,GAAac,QAAAd,qBAAAA","file":"administrator.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Administrator } from \"entities/administrator.entity\";\nimport { identity } from \"rxjs\";\nimport { Repository } from \"typeorm\" ;\n\n@Injectable()\nexport class AdministratorService{\n    constructor(\n        @InjectRepository(Administrator)\n        private readonly administrator: Repository<Administrator>,\n\n\n    ){}\n   //funkcija vraca niz administratora//\n    getAll():Promise<Administrator[]> {\n        return this.administrator.find();\n\n    }\n    getById(id: number): Promise<Administrator>{\n        return this.administrator.findOne(id);\n\n    }\n\n}"]}