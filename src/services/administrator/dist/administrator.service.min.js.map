{"version":3,"sources":["administrator.service.ts"],"names":["common_1","require","typeorm_1","administrator_entity_1","api_response_class_1","crypto","AdministratorService","administrator","this","prototype","getAll","find","getByUsername","usernameString","Promise","findOne","username","admin","_a","sent","getById","id","add","data","_this","passwordHash","createHash","update","password","passwordHashString","digest","toUpperCase","newAdmin","Administrator","resolve","save","then","error","response","ApiResponse","editById","undefined","__decorate","Injectable","__param","InjectRepository","arg0","Error","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBACAC,UAAAD,QAAA,mBACAE,uBAAAF,QAAA,iCAIAG,qBAAAH,QAAA,+BAEAI,OAAAJ,QAAA,UAIAK,qBAAA,WACI,SAAAA,EAEqBC,GAAAC,KAAAD,cAAAA,EA2EzB,OAtEID,EAAAG,UAAAC,OAAA,WACI,OAAOF,KAAKD,cAAcI,QAIxBL,EAAAG,UAAAG,cAAN,SAAoBC,gCAAwBC,QAAO,4EACjC,MAAA,CAAA,EAAMN,KAAKD,cAAcQ,QAAQ,CAC3CC,SAAUH,YAGd,OAJMI,EAAQC,EAAAC,QAKV,CAAA,EAAOF,GAGX,CAAA,EAAO,YAMVX,EAAAG,UAAAW,QAAA,SAAQC,GACL,OAAOb,KAAKD,cAAcQ,QAAQM,IAItCf,EAAAG,UAAAa,IAAA,SAAIC,GAAJ,IAAAC,EAAAhB,KAEUiB,EADSxB,QAAQ,UACKyB,WAAW,UACvCD,EAAaE,OAAOJ,EAAKK,UAEzB,IAAMC,EAAqBJ,EAAaK,OAAO,OAAOC,cAElDC,EAA0B,IAAI7B,uBAAA8B,cAIlC,OAHAD,EAAShB,SAAWO,EAAKP,SACzBgB,EAASP,aAAeI,EAEjB,IAAIf,QAAQ,SAACoB,GACfV,EAAKjB,cAAc4B,KAAKH,GACxBI,KAAK,SAAAb,GAAQ,OAAAW,EAAQX,KAChB,MAAC,SAAAc,GACH,IAAMC,EAAuB,IAAIlC,qBAAAmC,YAAY,SAAS,MACtDL,EAAQI,QASdhC,EAAAG,UAAA+B,SAAN,SAAenB,EAAYE,gCAA6BT,QAAO,gFAChC,MAAA,CAAA,EAAMN,KAAKD,cAAcQ,QAAQM,WAE5D,YAAcoB,KAFVxB,EAAuBC,EAAAC,QAGvB,CAAA,EAAO,IAAIL,QAAQ,SAACoB,GAChBA,EAAQ,IAAI9B,qBAAAmC,YAAY,SAAU,YAIpCd,EAAepB,OAAOqB,WAAW,WAC1BC,OAAOJ,EAAKK,UACnBC,EAAqBJ,EAAaK,OAAO,OAAOC,cAEtDd,EAAMQ,aAAeI,EAErB,CAAA,EAAOrB,KAAKD,cAAc4B,KAAKlB,WAzE1BX,EAAoBoC,WAAA,CADhC1C,SAAA2C,aAGQC,QAAA,EAAA1C,UAAA2C,iBAAiB1C,uBAAA8B,iBAFb3B,GAAb,GAgFA,SAAS8B,KAAKU,GACV,MAAM,IAAIC,MAAM,6BAjFPC,QAAA1C,qBAAAA","file":"administrator.service.min.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Administrator } from \"entities/administrator.entity\";\nimport { resolve } from \"path\";\nimport { AddAdministratorDto } from \"src/dtos/administrator/add.administrator.dto\";\nimport { EditAdministratorDto } from \"src/dtos/administrator/edit.administrator.dto\";\nimport { ApiResponse } from \"src/misc/api.response.class\";\nimport { Repository } from \"typeorm\" ;\nimport * as crypto from 'crypto';\n\n\n@Injectable()\nexport class AdministratorService{\n    constructor(\n        @InjectRepository(Administrator)\n        private readonly administrator: Repository<Administrator>,\n\n\n    ){}\n   //funkcija vraca niz administratora//\n    getAll():Promise<Administrator[]> {\n        return this.administrator.find();\n\n    }\n\n    async getByUsername(usernameString: string):Promise< Administrator | null> {\n        const admin = await this.administrator.findOne({\n            username: usernameString\n        });\n\n        if (admin){\n            return admin;\n        }\n\n        return null;\n\n    }\n\n\n\n     getById(id: number ): Promise<Administrator>{\n        return this.administrator.findOne(id);\n\n    }\n\n    add(data: AddAdministratorDto): Promise<Administrator | ApiResponse>{\n        const crypto = require('crypto');\n        const passwordHash = crypto.createHash('sha512');\n        passwordHash.update(data.password);\n\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\n\n        let newAdmin: Administrator = new Administrator();\n        newAdmin.username = data.username;\n        newAdmin.passwordHash = passwordHashString;\n\n        return new Promise((resolve) =>{\n             this.administrator.save(newAdmin)\n            .then(data => resolve(data))\n            .catch(error =>{\n                const response:ApiResponse = new ApiResponse(\"error\",-1001)\n                resolve(response);\n\n            });\n            \n        \n        });\n\n    }\n\n    async editById(id: number, data: EditAdministratorDto): Promise<Administrator | ApiResponse> {\n        let admin: Administrator = await this.administrator.findOne(id);\n\n        if (admin === undefined) {\n            return new Promise((resolve) => {\n                resolve(new ApiResponse(\"error\", -1002));\n            });\n        }\n\n        const passwordHash = crypto.createHash('sha512');\n        passwordHash.update(data.password);\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\n\n        admin.passwordHash = passwordHashString;\n\n        return this.administrator.save(admin);\n    }\n\n    \n\n}\n\nfunction then(arg0: (data: any) => void) {\n    throw new Error(\"Function not implemented.\");\n}\n\n"]}