{"version":3,"sources":["user.cart.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA6E;AAM7E,gFAAkE;AAElE,kEAA+D;AAI/D;IAEI,4BACY,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAEhC,CAAC;IAES,mDAAsB,GAApC,UAAqC,MAAc;uCAAG,OAAO;;;;4BAC9C,qBAAM,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,MAAM,CAAC,EAAA;;wBAA/D,IAAI,GAAG,SAAwD;6BAE/D,CAAC,IAAI,EAAL,wBAAK;wBACE,qBAAM,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAA;;wBAA1D,IAAI,GAAG,SAAmD,CAAA;;4BAGvD,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;4BAAlD,sBAAO,SAA2C,EAAC;;;;KACtD;IAED,2CAA2C;IAIrC,2CAAc,GAApB,UAA4B,GAAY;uCAAG,OAAO;;;4BACvC,qBAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAA;4BAAtD,sBAAO,SAA+C,EAAC;;;;KAC1D;IAED,sDAAsD;IAIhD,sCAAS,GAAf,UAAwB,IAAyB,EAAS,GAAY;uCAAG,OAAO;;;;4BAC/D,qBAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAA;;wBAAtD,IAAI,GAAG,SAA+C;wBACrD,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;4BAA1F,sBAAO,SAAmF,EAAC;;;;KAC9F;IAMK,2CAAc,GAApB,UAA6B,IAA0B,EAAS,GAAY;uCAAG,OAAO;;;;4BACrE,qBAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAA;;wBAAtD,IAAI,GAAG,SAA+C;wBACrD,qBAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;4BAAxF,sBAAO,SAAiF,EAAC;;;;KAC5F;IAKK,sCAAS,GAAf,UAAuB,GAAY;uCAAG,OAAO;;;;4BAC5B,qBAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAA;;wBAAtD,IAAI,GAAG,SAA+C;wBACrD,qBAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;4BAA/C,sBAAO,SAAwC,EAAA;;;;KAElD;IA7BD;QAHC,YAAG,EAAE;QACL,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,MAAM,CAAC;QACC,WAAA,YAAG,EAAE,CAAA;sDAE1B;IAMD;QAHC,aAAI,CAAC,WAAW,CAAC;QACjB,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,MAAM,CAAC;QACJ,WAAA,aAAI,EAAE,CAAA,EAA6B,WAAA,YAAG,EAAE,CAAA;iDAGxD;IAMD;QAHC,aAAI,EAAE;QACN,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,MAAM,CAAC;QACC,WAAA,aAAI,EAAE,CAAA,EAA8B,WAAA,YAAG,EAAE,CAAA;sDAG9D;IAKD;QAHC,aAAI,CAAC,WAAW,CAAC;QACjB,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,MAAM,CAAC;QACJ,WAAA,YAAG,EAAE,CAAA;iDAIrB;IAlDQ,kBAAkB;QAD9B,mBAAU,CAAC,eAAe,CAAC;OACf,kBAAkB,CAsD9B;IAAD,yBAAC;CAtDD,AAsDC,IAAA;AAtDY,gDAAkB","file":"user.cart.controller.js","sourcesContent":["import { Body, Controller, Get, Post, Req, UseGuards } from \"@nestjs/common\";\r\nimport { request, Request } from \"express\";\r\nimport { AddArticleToCartDto } from \"src/dtos/cart/add.article.to.cart.dto\";\r\nimport { EditArticleInCartDto } from \"src/dtos/cart/edit.article.in.cart.dto\";\r\nimport { Cart } from \"src/entities/cart.entity\";\r\nimport { Order } from \"src/entities/order.entity\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { RoleCheckedGuard } from \"src/misc/role.checker.guard\";\r\nimport { CartService } from \"src/services/cart/cart.service\";\r\n\r\n@Controller('api/user/cart')\r\nexport class UserCartController {\r\n    orderService: any;\r\n    constructor(\r\n        private cartService: CartService,\r\n        \r\n    ) { }\r\n\r\n    private async getActiveCartForUserId(userId: number): Promise<Cart> {\r\n        let cart = await this.cartService.getLastActiveCartByUserId(userId);\r\n\r\n        if (!cart) {\r\n            cart = await this.cartService.createNewCartForUser(userId)\r\n        }\r\n\r\n        return await this.cartService.getById(cart.cartId);\r\n    }\r\n\r\n    // GET http://localhost:3000/api/user/cart/\r\n    @Get()\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async getCurrentCart(@Req() req: Request): Promise<Cart> {\r\n        return await this.getActiveCartForUserId(req.token.id);\r\n    }\r\n\r\n    // POST http://localhost:3000/api/user/cart/addToCart/\r\n    @Post('addToCart')\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async addToCart(@Body() data: AddArticleToCartDto, @Req() req: Request): Promise<Cart> {\r\n        const cart = await this.getActiveCartForUserId(req.token.id);\r\n        return await this.cartService.addArticleToCart(cart.cartId, data.articleId, data.quantity);\r\n    }\r\n\r\n\r\n    @Post()\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async changeQuantity(@Body() data: EditArticleInCartDto, @Req() req: Request): Promise<Cart> {\r\n        const cart = await this.getActiveCartForUserId(req.token.id);\r\n        return await this.cartService.changeQuantity(cart.cartId, data.articleId, data.quantity);\r\n    }\r\n\r\n    @Post('makeOrder')\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async makeOrder(@Req() req: Request): Promise<Order | ApiResponse>  {\r\n        const cart = await this.getActiveCartForUserId(req.token.id);\r\n        return await this.orderService.add(cart.cartId)\r\n\r\n    }\r\n\r\n\r\n    \r\n} \r\n"]}