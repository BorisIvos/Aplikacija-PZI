{"version":3,"sources":["user.cart.controller.ts"],"names":["common_1","require","allow_to_roles_descriptor_1","role_checker_guard_1","UserCartController","cartService","this","prototype","getActiveCartForUserId","userId","Promise","getLastActiveCartByUserId","cart","_a","sent","createNewCartForUser","getById","cartId","getCurrentCart","req","token","id","addToCart","data","addArticleToCart","articleId","quantity","changeQuantity","makeOrder","orderService","add","__decorate","Get","UseGuards","RoleCheckedGuard","AllowToRoles","__param","Req","Post","Body","Controller","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBAMAC,4BAAAD,QAAA,sCAEAE,qBAAAF,QAAA,+BAIAG,mBAAA,WAEI,SAAAA,EACYC,GAAAC,KAAAD,YAAAA,EAmDhB,OA/CkBD,EAAAG,UAAAC,uBAAd,SAAqCC,gCAAiBC,QAAO,4EAC9C,MAAA,CAAA,EAAMJ,KAAKD,YAAYM,0BAA0BF,kBAAxDG,EAAOC,EAAAC,QAEP,CAAA,EAAA,GACO,CAAA,EAAMR,KAAKD,YAAYU,qBAAqBN,WAAnDG,EAAOC,EAAAC,wBAGJ,MAAA,CAAA,EAAMR,KAAKD,YAAYW,QAAQJ,EAAKK,gBAA3C,MAAA,CAAA,EAAOJ,EAAAC,cAOLV,EAAAG,UAAAW,eAAN,SAA4BC,gCAAeT,QAAO,sEACvC,MAAA,CAAA,EAAMJ,KAAKE,uBAAuBW,EAAIC,MAAMC,YAAnD,MAAA,CAAA,EAAOR,EAAAC,cAOLV,EAAAG,UAAAe,UAAN,SAAwBC,EAAkCJ,gCAAeT,QAAO,4EAC/D,MAAA,CAAA,EAAMJ,KAAKE,uBAAuBW,EAAIC,MAAMC,YAClD,OADDT,EAAOC,EAAAC,OACN,CAAA,EAAMR,KAAKD,YAAYmB,iBAAiBZ,EAAKK,OAAQM,EAAKE,UAAWF,EAAKG,kBAAjF,MAAA,CAAA,EAAOb,EAAAC,cAOLV,EAAAG,UAAAoB,eAAN,SAA6BJ,EAAmCJ,gCAAeT,QAAO,4EACrE,MAAA,CAAA,EAAMJ,KAAKE,uBAAuBW,EAAIC,MAAMC,YAClD,OADDT,EAAOC,EAAAC,OACN,CAAA,EAAMR,KAAKD,YAAYsB,eAAef,EAAKK,OAAQM,EAAKE,UAAWF,EAAKG,kBAA/E,MAAA,CAAA,EAAOb,EAAAC,cAMLV,EAAAG,UAAAqB,UAAN,SAAuBT,gCAAeT,QAAO,4EAC5B,MAAA,CAAA,EAAMJ,KAAKE,uBAAuBW,EAAIC,MAAMC,YAClD,OADDT,EAAOC,EAAAC,OACN,CAAA,EAAMR,KAAKuB,aAAaC,IAAIlB,EAAKK,gBAAxC,MAAA,CAAA,EAAOJ,EAAAC,cA3BXiB,WAAA,CAHC/B,SAAAgC,MACAhC,SAAAiC,UAAU9B,qBAAA+B,kBACVhC,4BAAAiC,aAAa,QACQC,QAAA,EAAApC,SAAAqC,sCAQtBN,WAAA,CAHC/B,SAAAsC,KAAK,aACLtC,SAAAiC,UAAU9B,qBAAA+B,kBACVhC,4BAAAiC,aAAa,QACGC,QAAA,EAAApC,SAAAuC,QAAmCH,QAAA,EAAApC,SAAAqC,iCASpDN,WAAA,CAHC/B,SAAAsC,OACAtC,SAAAiC,UAAU9B,qBAAA+B,kBACVhC,4BAAAiC,aAAa,QACQC,QAAA,EAAApC,SAAAuC,QAAoCH,QAAA,EAAApC,SAAAqC,sCAQ1DN,WAAA,CAHC/B,SAAAsC,KAAK,aACLtC,SAAAiC,UAAU9B,qBAAA+B,kBACVhC,4BAAAiC,aAAa,QACGC,QAAA,EAAApC,SAAAqC,iCA9CRjC,EAAkB2B,WAAA,CAD9B/B,SAAAwC,WAAW,kBACCpC,GAAb,GAAaqC,QAAArC,mBAAAA","file":"user.cart.controller.min.js","sourcesContent":["import { Body, Controller, Get, Post, Req, UseGuards } from \"@nestjs/common\";\r\nimport { request, Request } from \"express\";\r\nimport { AddArticleToCartDto } from \"src/dtos/cart/add.article.to.cart.dto\";\r\nimport { EditArticleInCartDto } from \"src/dtos/cart/edit.article.in.cart.dto\";\r\nimport { Cart } from \"src/entities/cart.entity\";\r\nimport { Order } from \"src/entities/order.entity\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { RoleCheckedGuard } from \"src/misc/role.checker.guard\";\r\nimport { CartService } from \"src/services/cart/cart.service\";\r\n\r\n@Controller('api/user/cart')\r\nexport class UserCartController {\r\n    orderService: any;\r\n    constructor(\r\n        private cartService: CartService,\r\n        \r\n    ) { }\r\n\r\n    private async getActiveCartForUserId(userId: number): Promise<Cart> {\r\n        let cart = await this.cartService.getLastActiveCartByUserId(userId);\r\n\r\n        if (!cart) {\r\n            cart = await this.cartService.createNewCartForUser(userId)\r\n        }\r\n\r\n        return await this.cartService.getById(cart.cartId);\r\n    }\r\n\r\n    // GET http://localhost:3000/api/user/cart/\r\n    @Get()\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async getCurrentCart(@Req() req: Request): Promise<Cart> {\r\n        return await this.getActiveCartForUserId(req.token.id);\r\n    }\r\n\r\n    // POST http://localhost:3000/api/user/cart/addToCart/\r\n    @Post('addToCart')\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async addToCart(@Body() data: AddArticleToCartDto, @Req() req: Request): Promise<Cart> {\r\n        const cart = await this.getActiveCartForUserId(req.token.id);\r\n        return await this.cartService.addArticleToCart(cart.cartId, data.articleId, data.quantity);\r\n    }\r\n\r\n\r\n    @Post()\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async changeQuantity(@Body() data: EditArticleInCartDto, @Req() req: Request): Promise<Cart> {\r\n        const cart = await this.getActiveCartForUserId(req.token.id);\r\n        return await this.cartService.changeQuantity(cart.cartId, data.articleId, data.quantity);\r\n    }\r\n\r\n    @Post('makeOrder')\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('user')\r\n    async makeOrder(@Req() req: Request): Promise<Order | ApiResponse>  {\r\n        const cart = await this.getActiveCartForUserId(req.token.id);\r\n        return await this.orderService.add(cart.cartId)\r\n\r\n    }\r\n\r\n\r\n    \r\n} \r\n"]}