{"version":3,"sources":["administrator.controller.ts"],"names":["common_1","require","api_response_class_1","allow_to_roles_descriptor_1","role_checker_guard_1","AdministratorController","administratorService","this","prototype","getAll","getById","administratorId","_this","Promise","resolve","__awaiter","undefined","admin","_a","sent","ApiResponse","add","data","edit","id","editById","__decorate","Get","UseGuards","RoleCheckGuard","SetMetadata","AllowToRoles","__param","Param","Post","Body","Patch","Controller","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBAMAC,qBAAAD,QAAA,+BAEAE,4BAAAF,QAAA,sCACAG,qBAAAH,QAAA,+BAIAI,wBAAA,WACI,SAAAA,EACYC,GAAAC,KAAAD,qBAAAA,EA4ChB,OApCID,EAAAG,UAAAC,OAAA,WACG,OAAOF,KAAKD,qBAAqBG,UAOpCJ,EAAAG,UAAAE,QAAA,SAAqBC,GAHrB,IAAAC,EAAAL,KAII,OAAO,IAAIM,QAAQ,SAAOC,GAAO,OAAAC,UAAAH,OAAA,OAAA,EAAA,4EACjB,MAAA,CAAA,EAAML,KAAKD,qBAAqBI,QAAQC,uBAEtCK,KAFVC,EAAQC,EAAAC,SAGRL,EAAQ,IAAIZ,qBAAAkB,YAAY,SAAU,OAGtCN,EAAQG,eAMhBZ,EAAAG,UAAAa,IAAA,SAAYC,GACR,OAAOf,KAAKD,qBAAqBe,IAAIC,IAQzCjB,EAAAG,UAAAe,KAAA,SAAkBC,EAAoBF,GAClC,OAAOf,KAAKD,qBAAqBmB,SAASD,EAAGF,IAhCjDI,WAAA,CAJC1B,SAAA2B,MACA3B,SAAA4B,UAAUxB,qBAAAyB,gBACV7B,SAAA8B,YAAY,iBAAkB,CAAC,gBAAiB,SAChD3B,4BAAA4B,aAAa,wCASdL,WAAA,CAHC1B,SAAA2B,IAAI,OACJ3B,SAAA4B,UAAUxB,qBAAAyB,gBACV1B,4BAAA4B,aAAa,iBACLC,QAAA,EAAAhC,SAAAiC,MAAM,+BAcfP,WAAA,CAHC1B,SAAAkC,OACAlC,SAAA4B,UAAUxB,qBAAAyB,gBACV1B,4BAAA4B,aAAa,iBACTC,QAAA,EAAAhC,SAAAmC,4BASLT,WAAA,CAHC1B,SAAAoC,MAAM,OACNpC,SAAA4B,UAAUxB,qBAAAyB,gBACV1B,4BAAA4B,aAAa,iBACRC,QAAA,EAAAhC,SAAAiC,MAAM,OAAmBD,QAAA,EAAAhC,SAAAmC,6BAzCtB9B,EAAuBqB,WAAA,CADnC1B,SAAAqC,WAAW,sBACChC,GAAb,GAAaiC,QAAAjC,wBAAAA","file":"administrator.controller.min.js","sourcesContent":["import { Body, Controller, Get, Param, Patch, Post, Put, SetMetadata, UseGuards } from \"@nestjs/common\";\r\nimport { Administrator } from \"src/entities/Administrator\";\r\nimport { get } from \"http\";\r\nimport { resolve } from \"path\";\r\nimport { AddAdministratorDto } from \"src/dtos/administrator/add.administrator.dto\";\r\nimport { EditAdministratorDto } from \"src/dtos/administrator/edit.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\nimport { RoleCheckGuard } from \"src/misc/role.checker.guard\";\r\n\r\n\r\n@Controller('api/administrator')\r\nexport class AdministratorController {\r\n    constructor(\r\n        private administratorService: AdministratorService\r\n\r\n    ){}\r\n\r\n    @Get()\r\n    @UseGuards(RoleCheckGuard)\r\n    @SetMetadata('allow_to_roles', ['administrator', 'user'])\r\n    @AllowToRoles('administrator')\r\n    getAll(): Promise<Administrator[]>{\r\n       return this.administratorService.getAll();\r\n  \r\n    }\r\n\r\n    @Get(':id')\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    getById(@Param('id') administratorId: number): Promise<Administrator | ApiResponse> {\r\n        return new Promise(async (resolve) => {\r\n            let admin = await this.administratorService.getById(administratorId);\r\n\r\n            if (admin === undefined) {\r\n                resolve(new ApiResponse(\"error\", -1002));\r\n            }\r\n\r\n            resolve(admin);\r\n        });\r\n    }\r\n    @Post()\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    add(@Body() data:AddAdministratorDto): Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.add(data);\r\n\r\n\r\n    }\r\n\r\n    @Patch(':id')\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    edit(@Param('id') id: number, @Body() data:EditAdministratorDto):Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.editById(id,data);\r\n    }\r\n\r\n\r\n}"]}