{"version":3,"sources":["administrator.controller.ts"],"names":["common_1","require","api_response_class_1","AdministratorController","administratorService","this","prototype","getAll","getById","administratorId","_this","Promise","resolve","__awaiter","undefined","admin","_a","sent","ApiResponse","add","data","edit","id","editById","__decorate","Get","__param","Param","Put","Body","Post","Controller","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBAMAC,qBAAAD,QAAA,+BAIAE,wBAAA,WACI,SAAAA,EACYC,GAAAC,KAAAD,qBAAAA,EAmChB,OA9BID,EAAAG,UAAAC,OAAA,WACG,OAAOF,KAAKD,qBAAqBG,UAKpCJ,EAAAG,UAAAE,QAAA,SAAqBC,GADrB,IAAAC,EAAAL,KAEI,OAAO,IAAIM,QAAQ,SAAOC,GAAO,OAAAC,UAAAH,OAAA,OAAA,EAAA,4EACjB,MAAA,CAAA,EAAML,KAAKD,qBAAqBI,QAAQC,uBAEtCK,KAFVC,EAAQC,EAAAC,SAGRL,EAAQ,IAAIV,qBAAAgB,YAAY,SAAU,OAGtCN,EAAQG,eAIhBZ,EAAAG,UAAAa,IAAA,SAAYC,GACR,OAAOf,KAAKD,qBAAqBe,IAAIC,IAMzCjB,EAAAG,UAAAe,KAAA,SAAkBC,EAAoBF,GAClC,OAAOf,KAAKD,qBAAqBmB,SAASD,EAAGF,IA1BjDI,WAAA,CADCxB,SAAAyB,6BAODD,WAAA,CADCxB,SAAAyB,IAAI,OACIC,QAAA,EAAA1B,SAAA2B,MAAM,+BAYfH,WAAA,CADCxB,SAAA4B,MACIF,QAAA,EAAA1B,SAAA6B,4BAOLL,WAAA,CADCxB,SAAA8B,KAAK,OACAJ,QAAA,EAAA1B,SAAA2B,MAAM,OAAmBD,QAAA,EAAA1B,SAAA6B,6BAhCtB1B,EAAuBqB,WAAA,CADnCxB,SAAA+B,WAAW,sBACC5B,GAAb,GAAa6B,QAAA7B,wBAAAA","file":"administrator.controller.min.js","sourcesContent":["import { Body, Controller, Get, Param, Post, Put } from \"@nestjs/common\";\r\nimport { Administrator } from \"entities/Administrator\";\r\nimport { get } from \"http\";\r\nimport { resolve } from \"path\";\r\nimport { AddAdministratorDto } from \"src/dtos/administrator/add.administrator.dto\";\r\nimport { EditAdministratorDto } from \"src/dtos/administrator/edit.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\n\r\n@Controller('api/administrator')\r\nexport class AdministratorController {\r\n    constructor(\r\n        private administratorService: AdministratorService\r\n\r\n    ){}\r\n\r\n    @Get()\r\n    getAll(): Promise<Administrator[]>{\r\n       return this.administratorService.getAll();\r\n  \r\n    }\r\n\r\n    @Get(':id')\r\n    getById(@Param('id') administratorId: number): Promise<Administrator | ApiResponse> {\r\n        return new Promise(async (resolve) => {\r\n            let admin = await this.administratorService.getById(administratorId);\r\n\r\n            if (admin === undefined) {\r\n                resolve(new ApiResponse(\"error\", -1002));\r\n            }\r\n\r\n            resolve(admin);\r\n        });\r\n    }\r\n    @Put()\r\n    add(@Body() data:AddAdministratorDto): Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.add(data);\r\n\r\n\r\n    }\r\n\r\n    @Post(':id')\r\n    edit(@Param('id') id: number, @Body() data:EditAdministratorDto):Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.editById(id,data);\r\n    }\r\n\r\n\r\n}"]}