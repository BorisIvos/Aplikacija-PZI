{"version":3,"sources":["administrator.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAwG;AAMxG,kEAA0D;AAE1D,gFAAkE;AAClE,kEAA+D;AAI/D;IACI,iCACY,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;IAEpD,CAAC;IAMH,wCAAM,GAAN;QACG,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;IAE7C,CAAC;IAKD,yCAAO,GAAP,UAAqB,eAAuB;QAH5C,iBAaC;QATG,OAAO,IAAI,OAAO,CAAC,UAAO,OAAO;;;;4BACjB,qBAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,eAAe,CAAC,EAAA;;wBAAhE,KAAK,GAAG,SAAwD;wBAEpE,IAAI,KAAK,KAAK,SAAS,EAAE;4BACrB,OAAO,CAAC,IAAI,gCAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;yBAC5C;wBAED,OAAO,CAAC,KAAK,CAAC,CAAC;;;;aAClB,CAAC,CAAC;IACP,CAAC;IAID,qCAAG,GAAH,UAAY,IAAwB;QAChC,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAG/C,CAAC;IAKD,sCAAI,GAAJ,UAAkB,EAAU,EAAU,IAAyB;QAC3D,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,EAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAjCD;QAJC,YAAG,EAAE;QACL,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,oBAAW,CAAC,gBAAgB,EAAE,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QACxD,wCAAY,CAAC,eAAe,CAAC;mDAI7B;IAKD;QAHC,YAAG,CAAC,KAAK,CAAC;QACV,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,eAAe,CAAC;QACrB,WAAA,cAAK,CAAC,IAAI,CAAC,CAAA;oDAUnB;IAID;QAHC,aAAI,EAAE;QACN,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,eAAe,CAAC;QACzB,WAAA,aAAI,EAAE,CAAA;gDAIV;IAKD;QAHC,cAAK,CAAC,KAAK,CAAC;QACZ,kBAAS,CAAC,qCAAgB,CAAC;QAC3B,wCAAY,CAAC,eAAe,CAAC;QACxB,WAAA,cAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,aAAI,EAAE,CAAA;iDAEpC;IA3CQ,uBAAuB;QADnC,mBAAU,CAAC,mBAAmB,CAAC;OACnB,uBAAuB,CA8CnC;IAAD,8BAAC;CA9CD,AA8CC,IAAA;AA9CY,0DAAuB","file":"administrator.controller.js","sourcesContent":["import { Body, Controller, Get, Param, Patch, Post, Put, SetMetadata, UseGuards } from \"@nestjs/common\";\r\nimport { Administrator } from \"src/entities/Administrator\";\r\nimport { get } from \"http\";\r\nimport { resolve } from \"path\";\r\nimport { AddAdministratorDto } from \"src/dtos/administrator/add.administrator.dto\";\r\nimport { EditAdministratorDto } from \"src/dtos/administrator/edit.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\nimport { RoleCheckedGuard } from \"src/misc/role.checker.guard\";\r\n\r\n\r\n@Controller('api/administrator')\r\nexport class AdministratorController {\r\n    constructor(\r\n        private administratorService: AdministratorService\r\n\r\n    ){}\r\n\r\n    @Get()\r\n    @UseGuards(RoleCheckedGuard)\r\n    @SetMetadata('allow_to_roles', ['administrator', 'user'])\r\n    @AllowToRoles('administrator')\r\n    getAll(): Promise<Administrator[]>{\r\n       return this.administratorService.getAll();\r\n  \r\n    }\r\n\r\n    @Get(':id')\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('administrator')\r\n    getById(@Param('id') administratorId: number): Promise<Administrator | ApiResponse> {\r\n        return new Promise(async (resolve) => {\r\n            let admin = await this.administratorService.getById(administratorId);\r\n\r\n            if (admin === undefined) {\r\n                resolve(new ApiResponse(\"error\", -1002));\r\n            }\r\n\r\n            resolve(admin);\r\n        });\r\n    }\r\n    @Post()\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('administrator')\r\n    add(@Body() data:AddAdministratorDto): Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.add(data);\r\n\r\n\r\n    }\r\n\r\n    @Patch(':id')\r\n    @UseGuards(RoleCheckedGuard)\r\n    @AllowToRoles('administrator')\r\n    edit(@Param('id') id: number, @Body() data:EditAdministratorDto):Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.editById(id,data);\r\n    }\r\n\r\n\r\n}"]}