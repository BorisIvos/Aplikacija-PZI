{"version":3,"sources":["administrator.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAyE;AAMzE,kEAA0D;AAI1D;IACI,iCACY,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;IAEpD,CAAC;IAGH,wCAAM,GAAN;QACG,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;IAE7C,CAAC;IAGD,yCAAO,GAAP,UAAqB,eAAuB;QAD5C,iBAWC;QATG,OAAO,IAAI,OAAO,CAAC,UAAO,OAAO;;;;4BACjB,qBAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,eAAe,CAAC,EAAA;;wBAAhE,KAAK,GAAG,SAAwD;wBAEpE,IAAI,KAAK,KAAK,SAAS,EAAE;4BACrB,OAAO,CAAC,IAAI,gCAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;yBAC5C;wBAED,OAAO,CAAC,KAAK,CAAC,CAAC;;;;aAClB,CAAC,CAAC;IACP,CAAC;IAED,qCAAG,GAAH,UAAY,IAAwB;QAChC,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAG/C,CAAC;IAGD,sCAAI,GAAJ,UAAkB,EAAU,EAAU,IAAyB;QAC3D,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,EAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IA3BD;QADC,YAAG,EAAE;mDAIL;IAGD;QADC,YAAG,CAAC,KAAK,CAAC;QACF,WAAA,cAAK,CAAC,IAAI,CAAC,CAAA;oDAUnB;IAED;QADC,YAAG,EAAE;QACD,WAAA,aAAI,EAAE,CAAA;gDAIV;IAGD;QADC,aAAI,CAAC,KAAK,CAAC;QACN,WAAA,cAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,aAAI,EAAE,CAAA;iDAEpC;IAlCQ,uBAAuB;QADnC,mBAAU,CAAC,mBAAmB,CAAC;OACnB,uBAAuB,CAqCnC;IAAD,8BAAC;CArCD,AAqCC,IAAA;AArCY,0DAAuB","file":"administrator.controller.js","sourcesContent":["import { Body, Controller, Get, Param, Post, Put } from \"@nestjs/common\";\r\nimport { Administrator } from \"src/entities/Administrator\";\r\nimport { get } from \"http\";\r\nimport { resolve } from \"path\";\r\nimport { AddAdministratorDto } from \"src/dtos/administrator/add.administrator.dto\";\r\nimport { EditAdministratorDto } from \"src/dtos/administrator/edit.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\n\r\n@Controller('api/administrator')\r\nexport class AdministratorController {\r\n    constructor(\r\n        private administratorService: AdministratorService\r\n\r\n    ){}\r\n\r\n    @Get()\r\n    getAll(): Promise<Administrator[]>{\r\n       return this.administratorService.getAll();\r\n  \r\n    }\r\n\r\n    @Get(':id')\r\n    getById(@Param('id') administratorId: number): Promise<Administrator | ApiResponse> {\r\n        return new Promise(async (resolve) => {\r\n            let admin = await this.administratorService.getById(administratorId);\r\n\r\n            if (admin === undefined) {\r\n                resolve(new ApiResponse(\"error\", -1002));\r\n            }\r\n\r\n            resolve(admin);\r\n        });\r\n    }\r\n    @Put()\r\n    add(@Body() data:AddAdministratorDto): Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.add(data);\r\n\r\n\r\n    }\r\n\r\n    @Post(':id')\r\n    edit(@Param('id') id: number, @Body() data:EditAdministratorDto):Promise<Administrator | ApiResponse>{\r\n        return this.administratorService.editById(id,data);\r\n    }\r\n\r\n\r\n}"]}