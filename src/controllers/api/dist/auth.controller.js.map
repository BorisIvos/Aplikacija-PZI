{"version":3,"sources":["auth.controller.ts"],"names":[],"mappings":"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","file":"auth.controller.js","sourcesContent":["import { Body, Controller, Post, Put, Req } from \"@nestjs/common\";\r\nimport { LoginAdministratorDto } from \"src/dtos/administrator/login.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport { resolve } from \"dns\";\r\nimport * as crypto from 'crypto';\r\nimport * as jwt from 'jsonwebtoken'\r\nimport { Request} from \"express\";\r\nimport { jwtSecret } from \"config/jwt.secret\";\r\nimport { UserRegistrationDto } from \"src/dtos/user/user.registration.dto\";\r\nimport { UserService } from \"src/services/user/user.service\";\r\nimport { JwtDataDto } from \"src/dtos/administrator/auth/jwt.data.dto\";\r\nimport { LoginInfoDto } from \"src/dtos/administrator/auth/login.info.dto\";\r\nimport { LoginUserDto } from \"src/dtos/user/login.user.dto\";\r\n\r\n\r\n@Controller('auth')\r\nexport class AuthController{\r\n    constructor(\r\n        public administratorService: AdministratorService,\r\n        public userService: UserService,\r\n        \r\n        ){ }\r\n\r\n    @Post('administrator/login') //http://localhost:3000/auth/login/\r\n    async doAdministratorLogin(@Body() data: LoginAdministratorDto, @Req() req: Request): Promise< LoginInfoDto | ApiResponse>{\r\n        const administrator =await this.administratorService.getByUsername(data.username);\r\n\r\n        if (!administrator) {\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3001)));\r\n        }\r\n\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        if(administrator.passwordHash !== passwordHashString){\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3002)));\r\n\r\n        }\r\n\r\n        //administratorId\r\n        // username\r\n        // token (JWT)\r\n        // TAJNI KOD\r\n        // JSON = {administratorId, username, exp, ip, ua}\r\n        //Sifrovanje (TAJNA SIFRA -> JSON) -> Sifra binarni ->BASE64\r\n        // HEX STRING\r\n        const jwtData = new JwtDataDto();\r\n        jwtData.role = \"administrator\";\r\n        jwtData.id = administrator.administratorId;\r\n        jwtData.identity =administrator.username;\r\n        let sada = new Date();\r\n        sada.setDate(sada.getDate() + 14);\r\n        const istekTimestamp = sada.getTime() / 1000;\r\n        jwtData.exp = istekTimestamp;\r\n\r\n        jwtData.ip = req.ip.toString();\r\n        jwtData.ua = req.headers[\"user-agent\"];\r\n\r\n\r\n\r\n        let token: string = jwt.sign(jwtData.toPlainObject(), jwtSecret);\r\n\r\n        const responseObject = new LoginInfoDto(\r\n            administrator.administratorId,\r\n            administrator.username,\r\n            token\r\n            \r\n        );\r\n\r\n        return new Promise(resolve => resolve(responseObject));\r\n\r\n    }\r\n\r\n    @Put('user/register') // PUT http://localhost:3000/auth/user/register/\r\n    async userRegister(@Body() data: UserRegistrationDto) {\r\n        return await this.userService.register(data);\r\n\r\n    }\r\n\r\n\r\n    @Post('administrator/login') //http://localhost:3000/auth/login/\r\n    async doUserLogin(@Body() data: LoginUserDto, @Req() req: Request): Promise< LoginInfoDto | ApiResponse>{\r\n        const user =await this.userService.getByEmail(data.email);\r\n\r\n        if (!user) {\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3001)));\r\n        }\r\n\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        if(user.passwordHash !== passwordHashString){\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3002)));\r\n\r\n        }\r\n\r\n        //administratorId\r\n        // username\r\n        // token (JWT)\r\n        // TAJNI KOD\r\n        // JSON = {administratorId, username, exp, ip, ua}\r\n        //Sifrovanje (TAJNA SIFRA -> JSON) -> Sifra binarni ->BASE64\r\n        // HEX STRING\r\n        const jwtData = new JwtDataDto();\r\n        jwtData.role = \"user\";\r\n        jwtData.id = user.userId;\r\n        jwtData.identity = user.email;\r\n        let sada = new Date();\r\n        sada.setDate(sada.getDate() + 14);\r\n        const istekTimestamp = sada.getTime() / 1000;\r\n        jwtData.exp = istekTimestamp;\r\n\r\n        jwtData.ip = req.ip.toString();\r\n        jwtData.ua = req.headers[\"user-agent\"];\r\n\r\n\r\n\r\n        let token: string = jwt.sign(jwtData.toPlainObject(), jwtSecret);\r\n\r\n        const responseObject = new LoginInfoDto(\r\n            user.userId,\r\n            user.email,\r\n            token\r\n            \r\n        );\r\n\r\n        return new Promise(resolve => resolve(responseObject));\r\n\r\n    }\r\n\r\n    \r\n\r\n}"]}