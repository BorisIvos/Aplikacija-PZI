{"version":3,"sources":["auth.controller.ts"],"names":["common_1","require","api_response_class_1","crypto","login_info_administrator_dto_1","jwt","jwt_data_administrator_dto_1","jwt_secret_1","AuthController","administratorService","this","prototype","doLogin","data","req","Promise","getByUsername","username","administrator","_a","sent","passwordHash","createHash","update","password","passwordHashString","digest","toUpperCase","resolve","ApiResponse","jwtData","JwtDataAdministatorDto","administratorId","sada","Date","setDate","getDate","istekTimestamp","getTime","exp","ip","toString","ua","headers","token","sign","toPlainObject","jwtSecret","responseObject","LoginInfoAdministratorDto","__decorate","Post","__param","Body","Req","Controller","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBAEAC,qBAAAD,QAAA,+BAGAE,OAAAF,QAAA,UACAG,+BAAAH,QAAA,uDACAI,IAAAJ,QAAA,gBACAK,6BAAAL,QAAA,qDAEAM,aAAAN,QAAA,qBAIAO,eAAA,WACI,SAAAA,EAAmBC,GAAAC,KAAAD,qBAAAA,EAoDvB,OAjDUD,EAAAG,UAAAC,QAAN,SAAsBC,EAAoCC,gCAAeC,QAAO,0FACvD,MAAA,CAAA,EAAML,KAAKD,qBAAqBO,cAAcH,EAAKI,kBAExE,OAFMC,EAAeC,EAAAC,UAMfC,EAAelB,OAAOmB,WAAW,WAC1BC,OAAOV,EAAKW,UACnBC,EAAqBJ,EAAaK,OAAO,OAAOC,cAEnDT,EAAcG,eAAiBI,EAC9B,CAAA,EAAO,IAAIV,QAAQ,SAAAa,GAAW,OAAAA,EAAQ,IAAI1B,qBAAA2B,YAAY,SAAU,YAW9DC,EAAU,IAAIxB,6BAAAyB,wBACZC,gBAAkBd,EAAcc,gBACxCF,EAAQb,SAAUC,EAAcD,UAC5BgB,EAAO,IAAIC,MACVC,QAAQF,EAAKG,UAAY,IACxBC,EAAiBJ,EAAKK,UAAY,IACxCR,EAAQS,IAAMF,EAEdP,EAAQU,GAAK1B,EAAI0B,GAAGC,WACpBX,EAAQY,GAAK5B,EAAI6B,QAAQ,cAIrBC,EAAgBvC,IAAIwC,KAAKf,EAAQgB,gBAAiBvC,aAAAwC,WAEhDC,EAAiB,IAAI5C,+BAAA6C,0BACvB/B,EAAcc,gBACdd,EAAcD,SACd2B,GAIJ,CAAA,EAAO,IAAI7B,QAAQ,SAAAa,GAAW,OAAAA,EAAQoB,QAzClC,CAAA,EAAO,IAAIjC,QAAQ,SAAAa,GAAW,OAAAA,EAAQ,IAAI1B,qBAAA2B,YAAY,SAAU,gBAJxEqB,WAAA,CADClD,SAAAmD,KAAK,SACSC,QAAA,EAAApD,SAAAqD,QAAqCD,QAAA,EAAApD,SAAAsD,+BAJ3C9C,EAAc0C,WAAA,CAD1BlD,SAAAuD,WAAW,SACC/C,GAAb,GAAagD,QAAAhD,eAAAA","file":"auth.controller.min.js","sourcesContent":["import { Body, Controller, Post, Req } from \"@nestjs/common\";\r\nimport { LoginAdministratorDto } from \"src/dtos/administrator/login.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport { resolve } from \"dns\";\r\nimport * as crypto from 'crypto';\r\nimport { LoginInfoAdministratorDto } from \"src/dtos/administrator/login.info.administrator.dto\";\r\nimport * as jwt from 'jsonwebtoken'\r\nimport { JwtDataAdministatorDto } from \"src/dtos/administrator/jwt.data.administrator.dto\";\r\nimport { Request} from \"express\";\r\nimport { jwtSecret } from \"config/jwt.secret\";\r\n\r\n\r\n@Controller('auth')\r\nexport class AuthController{\r\n    constructor(public administratorService: AdministratorService){}\r\n\r\n    @Post('login') //http://localhost:3000/auth/login/\r\n    async doLogin(@Body() data: LoginAdministratorDto, @Req() req: Request): Promise< LoginInfoAdministratorDto | ApiResponse>{\r\n        const administrator =await this.administratorService.getByUsername(data.username);\r\n\r\n        if (!administrator) {\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3001)));\r\n        }\r\n\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        if(administrator.passwordHash !== passwordHashString){\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3002)));\r\n\r\n        }\r\n\r\n        //administratorId\r\n        // username\r\n        // token (JWT)\r\n        // TAJNI KOD\r\n        // JSON = {administratorId, username, exp, ip, ua}\r\n        //Sifrovanje (TAJNA SIFRA -> JSON) -> Sifra binarni ->BASE64\r\n        // HEX STRING\r\n        const jwtData = new JwtDataAdministatorDto();\r\n        jwtData.administratorId = administrator.administratorId;\r\n        jwtData.username =administrator.username;\r\n        let sada = new Date();\r\n        sada.setDate(sada.getDate() + 14);\r\n        const istekTimestamp = sada.getTime() / 1000;\r\n        jwtData.exp = istekTimestamp;\r\n\r\n        jwtData.ip = req.ip.toString();\r\n        jwtData.ua = req.headers[\"user-agent\"];\r\n\r\n\r\n\r\n        let token: string = jwt.sign(jwtData.toPlainObject(), jwtSecret);\r\n\r\n        const responseObject = new LoginInfoAdministratorDto(\r\n            administrator.administratorId,\r\n            administrator.username,\r\n            token\r\n            \r\n        );\r\n\r\n        return new Promise(resolve => resolve(responseObject));\r\n\r\n    }\r\n\r\n}"]}