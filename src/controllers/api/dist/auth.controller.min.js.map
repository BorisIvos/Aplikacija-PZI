{"version":3,"sources":["auth.controller.ts"],"names":["common_1","require","api_response_class_1","crypto","jwt","jwt_secret_1","jwt_data_dto_1","login_info_dto_1","AuthController","administratorService","userService","this","prototype","doAdministratorLogin","data","req","Promise","getByUsername","username","administrator","_a","sent","passwordHash","createHash","update","password","passwordHashString","digest","toUpperCase","resolve","ApiResponse","jwtData","JwtDataDto","role","id","administratorId","identity","sada","Date","setDate","getDate","istekTimestamp","getTime","exp","ip","toString","ua","headers","token","sign","toPlainObject","jwtSecret","responseObject","LoginInfoDto","userRegister","register","doUserLogin","getByEmail","email","user","userId","__decorate","Post","__param","Body","Req","Put","Controller","exports"],"mappings":"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","file":"auth.controller.min.js","sourcesContent":["import { Body, Controller, Post, Put, Req } from \"@nestjs/common\";\r\nimport { LoginAdministratorDto } from \"src/dtos/administrator/login.administrator.dto\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport { AdministratorService } from \"src/services/administrator/administrator.service\";\r\nimport { resolve } from \"dns\";\r\nimport * as crypto from 'crypto';\r\nimport * as jwt from 'jsonwebtoken'\r\nimport { Request} from \"express\";\r\nimport { jwtSecret } from \"config/jwt.secret\";\r\nimport { UserRegistrationDto } from \"src/dtos/user/user.registration.dto\";\r\nimport { UserService } from \"src/services/user/user.service\";\r\nimport { JwtDataDto } from \"src/dtos/administrator/auth/jwt.data.dto\";\r\nimport { LoginInfoDto } from \"src/dtos/administrator/auth/login.info.dto\";\r\nimport { LoginUserDto } from \"src/dtos/user/login.user.dto\";\r\n\r\n\r\n@Controller('auth')\r\nexport class AuthController{\r\n    constructor(\r\n        public administratorService: AdministratorService,\r\n        public userService: UserService,\r\n        \r\n        ){ }\r\n\r\n    @Post('administrator/login') //http://localhost:3000/auth/login/\r\n    async doAdministratorLogin(@Body() data: LoginAdministratorDto, @Req() req: Request): Promise< LoginInfoDto | ApiResponse>{\r\n        const administrator =await this.administratorService.getByUsername(data.username);\r\n\r\n        if (!administrator) {\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3001)));\r\n        }\r\n\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        if(administrator.passwordHash !== passwordHashString){\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3002)));\r\n\r\n        }\r\n\r\n        //administratorId\r\n        // username\r\n        // token (JWT)\r\n        // TAJNI KOD\r\n        // JSON = {administratorId, username, exp, ip, ua}\r\n        //Sifrovanje (TAJNA SIFRA -> JSON) -> Sifra binarni ->BASE64\r\n        // HEX STRING\r\n        const jwtData = new JwtDataDto();\r\n        jwtData.role = \"administrator\";\r\n        jwtData.id = administrator.administratorId;\r\n        jwtData.identity =administrator.username;\r\n        let sada = new Date();\r\n        sada.setDate(sada.getDate() + 14);\r\n        const istekTimestamp = sada.getTime() / 1000;\r\n        jwtData.exp = istekTimestamp;\r\n\r\n        jwtData.ip = req.ip.toString();\r\n        jwtData.ua = req.headers[\"user-agent\"];\r\n\r\n\r\n\r\n        let token: string = jwt.sign(jwtData.toPlainObject(), jwtSecret);\r\n\r\n        const responseObject = new LoginInfoDto(\r\n            administrator.administratorId,\r\n            administrator.username,\r\n            token\r\n            \r\n        );\r\n\r\n        return new Promise(resolve => resolve(responseObject));\r\n\r\n    }\r\n\r\n    @Put('user/register') // PUT http://localhost:3000/auth/user/register/\r\n    async userRegister(@Body() data: UserRegistrationDto) {\r\n        return await this.userService.register(data);\r\n\r\n    }\r\n\r\n\r\n    @Post('administrator/login') //http://localhost:3000/auth/login/\r\n    async doUserLogin(@Body() data: LoginUserDto, @Req() req: Request): Promise< LoginInfoDto | ApiResponse>{\r\n        const user =await this.userService.getByEmail(data.email);\r\n\r\n        if (!user) {\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3001)));\r\n        }\r\n\r\n        const passwordHash = crypto.createHash('sha512');\r\n        passwordHash.update(data.password);\r\n        const passwordHashString = passwordHash.digest('hex').toUpperCase();\r\n\r\n        if(user.passwordHash !== passwordHashString){\r\n            return new Promise(resolve => resolve(new ApiResponse('error', -3002)));\r\n\r\n        }\r\n\r\n        //administratorId\r\n        // username\r\n        // token (JWT)\r\n        // TAJNI KOD\r\n        // JSON = {administratorId, username, exp, ip, ua}\r\n        //Sifrovanje (TAJNA SIFRA -> JSON) -> Sifra binarni ->BASE64\r\n        // HEX STRING\r\n        const jwtData = new JwtDataDto();\r\n        jwtData.role = \"user\";\r\n        jwtData.id = user.userId;\r\n        jwtData.identity = user.email;\r\n        let sada = new Date();\r\n        sada.setDate(sada.getDate() + 14);\r\n        const istekTimestamp = sada.getTime() / 1000;\r\n        jwtData.exp = istekTimestamp;\r\n\r\n        jwtData.ip = req.ip.toString();\r\n        jwtData.ua = req.headers[\"user-agent\"];\r\n\r\n\r\n\r\n        let token: string = jwt.sign(jwtData.toPlainObject(), jwtSecret);\r\n\r\n        const responseObject = new LoginInfoDto(\r\n            user.userId,\r\n            user.email,\r\n            token\r\n            \r\n        );\r\n\r\n        return new Promise(resolve => resolve(responseObject));\r\n\r\n    }\r\n\r\n    \r\n\r\n}"]}