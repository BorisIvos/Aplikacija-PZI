{"version":3,"sources":["feature.controller.ts"],"names":["common_1","require","feature_entity_1","crud_1","role_checker_guard_1","allow_to_roles_descriptor_1","FeatureController","service","this","__decorate","Controller","Crud","model","type","Feature","params","id","field","primary","query","join","category","eager","articleFeatures","articles","routes","only","createOneBase","decorators","UseGuards","RoleCheckedGuard","AllowToRoles","createManyBase","updateOneBase","getManyBase","exports"],"mappings":"6YAAA,IAAAA,SAAAC,QAAA,kBACAC,iBAAAD,QAAA,+BACAE,OAAAF,QAAA,iBAEAG,qBAAAH,QAAA,+BACAI,4BAAAJ,QAAA,sCAmECK,kBAAA,WACG,SAAAA,EAAmBC,GAAAC,KAAAD,QAAAA,EACtB,OAFaD,EAAiBG,WAAA,CAhE9BT,SAAAU,WAAW,eACXP,OAAAQ,KAAK,CACFC,MAAO,CACHC,KAAMX,iBAAAY,SAEVC,OAAQ,CACJC,GAAI,CACAC,MAAO,YACPJ,KAAM,SACNK,SAAS,IAGjBC,MAAO,CACHC,KAAM,CACFC,SAAU,CACNC,OAAO,GAEXC,gBAAiB,CACbD,OAAO,GAEXE,SAAU,CACNF,OAAO,KAInBG,OAAQ,CACJC,KAAM,CACF,gBACA,iBACA,cACA,aACA,iBAEJC,cAAe,CACXC,WAAY,CACR5B,SAAA6B,UAAUzB,qBAAA0B,kBACVzB,4BAAA0B,aAAa,mBAIrBC,eAAgB,CACZJ,WAAY,CACR5B,SAAA6B,UAAUzB,qBAAA0B,kBACVzB,4BAAA0B,aAAa,mBAIrBE,cAAe,CACXL,WAAY,CACR5B,SAAA6B,UAAUzB,qBAAA0B,kBACVzB,4BAAA0B,aAAa,mBAIrBG,YAAa,CACTN,WAAY,CACR5B,SAAA6B,UAAUzB,qBAAA0B,kBACVzB,4BAAA0B,aAAa,gBAAiB,cAOhCzB,GAAb,GAAa6B,QAAA7B,kBAAAA","file":"feature.controller.min.js","sourcesContent":["import { Controller, UseGuards } from \"@nestjs/common\";\r\nimport { Feature   } from \"src/entities/feature.entity\";\r\nimport { Crud } from \"@nestjsx/crud\";\r\nimport { FeatureService } from \"src/services/feature/feature.service\";\r\nimport { RoleCheckedGuard } from \"src/misc/role.checker.guard\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\n\r\n\r\n@Controller('api/feature')\r\n@Crud({\r\n    model: {\r\n        type: Feature\r\n    },\r\n    params: {\r\n        id: {\r\n            field: 'featureId',\r\n            type: 'number',\r\n            primary: true\r\n        }\r\n    },\r\n    query: {\r\n        join: {\r\n            category: {\r\n                eager: true\r\n            },\r\n            articleFeatures: {\r\n                eager: false\r\n            },\r\n            articles: {\r\n                eager: false\r\n            }\r\n        }\r\n    },\r\n    routes: {\r\n        only: [\r\n            \"createOneBase\",\r\n            \"createManyBase\",\r\n            \"getManyBase\",\r\n            \"getOneBase\",\r\n            \"updateOneBase\",\r\n        ],\r\n        createOneBase: {\r\n            decorators: [\r\n                UseGuards(RoleCheckedGuard),\r\n                AllowToRoles('administrator'),\r\n\r\n            ],\r\n        },\r\n        createManyBase: {\r\n            decorators: [\r\n                UseGuards(RoleCheckedGuard),\r\n                AllowToRoles('administrator'),\r\n            ],\r\n            \r\n        },\r\n        updateOneBase: {\r\n            decorators: [\r\n                UseGuards(RoleCheckedGuard),\r\n                AllowToRoles('administrator'),\r\n            ],\r\n\r\n        },\r\n        getManyBase: {\r\n            decorators: [\r\n                UseGuards(RoleCheckedGuard),\r\n                AllowToRoles('administrator', 'user',)\r\n            ],\r\n        },\r\n    }\r\n    \r\n\r\n } )\r\n export class FeatureController {\r\n    constructor(public service: FeatureService) { }\r\n }\r\n\r\n"]}