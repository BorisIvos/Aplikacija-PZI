{"version":3,"sources":["category.controller.ts"],"names":["common_1","require","category_entity_1","crud_1","role_checker_guard_1","allow_to_roles_descriptor_1","CategoryController","service","this","__decorate","Controller","Crud","model","type","Category","params","id","field","primary","query","join","categories","eager","features","parentCategory","articles","routes","only","createOneBase","decorators","UseGuards","RoleCheckedGuard","AllowToRoles","createManyBase","updateOneBase","getManyBase","exports"],"mappings":"6YAAA,IAAAA,SAAAC,QAAA,kBACAC,kBAAAD,QAAA,gCACAE,OAAAF,QAAA,iBAEAG,qBAAAH,QAAA,+BACAI,4BAAAJ,QAAA,sCAqEAK,mBAAA,WACI,SAAAA,EAAmBC,GAAAC,KAAAD,QAAAA,EACvB,OAFaD,EAAkBG,WAAA,CAlE9BT,SAAAU,WAAW,gBACXP,OAAAQ,KAAK,CACFC,MAAO,CACHC,KAAMX,kBAAAY,UAEVC,OAAQ,CACJC,GAAI,CACAC,MAAO,aACPJ,KAAM,SACNK,SAAS,IAGjBC,MAAO,CACHC,KAAM,CACFC,WAAY,CACRC,OAAO,GAEXC,SAAU,CACND,OAAO,GAEXE,eAAgB,CACZF,OAAO,GAEXG,SAAU,CACNH,OAAO,KAIdI,OAAQ,CACLC,KAAM,CACF,gBACA,iBACA,cACA,aACA,iBAEJC,cAAe,CACXC,WAAY,CACR7B,SAAA8B,UAAU1B,qBAAA2B,kBACV1B,4BAAA2B,aAAa,mBAIrBC,eAAgB,CACZJ,WAAY,CACR7B,SAAA8B,UAAU1B,qBAAA2B,kBACV1B,4BAAA2B,aAAa,mBAIrBE,cAAe,CACXL,WAAY,CACR7B,SAAA8B,UAAU1B,qBAAA2B,kBACV1B,4BAAA2B,aAAa,mBAIrBG,YAAa,CACTN,WAAY,CACR7B,SAAA8B,UAAU1B,qBAAA2B,kBACV1B,4BAAA2B,aAAa,gBAAiB,cAMrC1B,GAAb,GAAa8B,QAAA9B,mBAAAA","file":"category.controller.min.js","sourcesContent":["import { Controller, UseGuards } from \"@nestjs/common\";\r\nimport { Category } from \"src/entities/category.entity\";\r\nimport { Crud } from \"@nestjsx/crud\";\r\nimport { CategoryService } from \"src/services/administrator/category/category.service\";\r\nimport { RoleCheckedGuard } from \"src/misc/role.checker.guard\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\n\r\n\r\n@Controller('api/category')\r\n@Crud({\r\n    model: {\r\n        type: Category\r\n    },\r\n    params: {\r\n        id: {\r\n            field: 'categoryId',\r\n            type: 'number',\r\n            primary: true\r\n        }\r\n    },\r\n    query: {\r\n        join: {\r\n            categories: {\r\n                eager: true\r\n            },\r\n            features: {\r\n                eager: true\r\n            },\r\n            parentCategory: {\r\n                eager: false\r\n            },\r\n            articles: {\r\n                eager: false\r\n            }\r\n        }\r\n         },\r\n         routes: {\r\n            only: [\r\n                \"createOneBase\",\r\n                \"createManyBase\",\r\n                \"getManyBase\",\r\n                \"getOneBase\",\r\n                \"updateOneBase\",\r\n            ],\r\n            createOneBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckedGuard),\r\n                    AllowToRoles('administrator'),\r\n    \r\n                ],\r\n            },\r\n            createManyBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckedGuard),\r\n                    AllowToRoles('administrator'),\r\n                ],\r\n                \r\n            },\r\n            updateOneBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckedGuard),\r\n                    AllowToRoles('administrator'),\r\n                ],\r\n    \r\n            },\r\n            getManyBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckedGuard),\r\n                    AllowToRoles('administrator', 'user',)\r\n                ],\r\n            },\r\n        }\r\n        \r\n    })\r\nexport class CategoryController {\r\n    constructor(public service: CategoryService) { }\r\n}\r\n\r\n\r\n"]}