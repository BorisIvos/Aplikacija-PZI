{"version":3,"sources":["article.controller.ts"],"names":["common_1","require","platform_express_1","crud_1","article_entity_1","multer_1","storage_config_1","photo_entity_1","api_response_class_1","fileType","fs","sharp","ArticleController","service","photoService","this","prototype","createFullArticle","data","uploadPhoto","articleId","photo","req","Promise","fileFilterError","ApiResponse","fromFile","path","fileTypeResult","_a","sent","realMimeType","mime","includes","createThumb","unlinkSync","createSmallImage","newPhoto","Photo","imagePath","filename","add","savedPhoto","originalFilePath","fileName","destinationFilePath","StorageConfig","photoDestination","resize","fit","width","photoThumbSize","height","background","r","g","b","alpha","toFile","photoSmallSize","__decorate","Post","__param","Body","UseInterceptors","FileInterceptor","storage","diskStorage","destination","file","callback","normalized","originalname","replace","sada","Date","datePart","getFullYear","toString","getMonth","getDate","Array","fill","map","e","Math","random","toFixed","join","toLocaleLowerCase","fileFilter","toLowerCase","match","mimetype","limits","files","fileSize","photoMaxFileSize","Param","UploadedFile","Req","Controller","Crud","model","type","Article","params","id","field","primary","query","category","eager","photos","articlePrices","articleFeatures","features","exports"],"mappings":"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","file":"article.controller.min.js","sourcesContent":["import { Body, Controller, Param, Post, Req, UploadedFile, UseInterceptors } from \"@nestjs/common\";\r\nimport { FileInterceptor } from \"@nestjs/platform-express\";\r\nimport { Crud } from \"@nestjsx/crud\";\r\nimport { Article } from \"entities/article.entity\";\r\nimport { AddArticleDto } from \"src/dtos/article/add.article.dto\";\r\nimport { ArticleService } from \"src/services/article/article.service\";\r\nimport { diskStorage} from \"multer\";\r\nimport { StorageConfig } from \"config/storage.config\";\r\nimport { PhotoService } from \"src/services/photo/photo.services\";\r\nimport { Photo } from \"entities/photo.entity\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport * as fileType from 'file-type';\r\nimport * as fs from 'fs';\r\nimport * as sharp from 'sharp';\r\n\r\n\r\n\r\n@Controller('api/article')\r\n@Crud({\r\n    model: {\r\n        type: Article\r\n    },\r\n    params: {\r\n        id: {\r\n            field: 'articleId',\r\n            type: 'number',\r\n            primary: true\r\n        }\r\n    },\r\n    query: {\r\n        join: {\r\n            category: {\r\n                eager: true\r\n            },\r\n            photos: {\r\n                eager: true\r\n            },\r\n            articlePrices: {\r\n                eager: true\r\n            },\r\n            articleFeatures: {\r\n                eager: true\r\n            },\r\n            features: {\r\n                eager: true\r\n            }\r\n            \r\n           \r\n            }\r\n        }\r\n         })\r\n    \r\nexport class ArticleController {\r\n    constructor(public service: ArticleService,\r\n                public photoService: PhotoService,\r\n                                \r\n        ) { }\r\n\r\n    @Post('createFull')  //Post http://localhost:3000/api/article/createFull/\r\n    createFullArticle(@Body() data: AddArticleDto){\r\n        return this.service.createFullArticle(data);\r\n    }\r\n\r\n    @Post(':id/uploadPhoto/') // POST http://localhost:3000/api/article/:id/uploadPhoto\r\n    @UseInterceptors(\r\n        FileInterceptor('photo', {\r\n            storage: diskStorage({\r\n                destination: StorageConfig.photoDestination,\r\n                filename: (req, file, callback) => {\r\n                    let original: string = file.originalname;\r\n\r\n                    let normalized = original.replace(/\\s+/g, '-');\r\n                    normalized = normalized.replace(/[^A-z0-9\\.\\-]/g, '');\r\n                    let sada = new Date();\r\n                    let datePart = '';\r\n                    datePart += sada.getFullYear().toString();\r\n                    datePart += (sada.getMonth() + 1).toString();\r\n                    datePart += sada.getDate().toString();\r\n\r\n                    let randomPart: string =\r\n                        new Array(10)\r\n                            .fill(0)\r\n                            .map(e => (Math.random() * 9).toFixed(0).toString())\r\n                            .join('');\r\n\r\n                    let fileName = datePart + '-' + randomPart + '-' + normalized;\r\n                    fileName = fileName.toLocaleLowerCase();\r\n\r\n                    callback(null, fileName);\r\n                }\r\n            }),\r\n            fileFilter: (req, file, callback) => {\r\n                // 1. Check ekstenzije: JPG, PNG\r\n                if (!file.originalname.toLowerCase().match(/\\.(jpg|png)$/)) {\r\n                    req.fileFilterError = 'Bad file extension!';\r\n                    callback(null, false);\r\n                    return;\r\n                }\r\n\r\n                // 2. Check tipa sadrzaja: image/jpeg, image/png (mimetype)\r\n                if (!(file.mimetype.includes('jpeg') || file.mimetype.includes('png'))) {\r\n                    req.fileFilterError = 'Bad file content type!';\r\n                    callback(null, false);\r\n                    return;\r\n                }\r\n\r\n                callback(null, true);\r\n            },\r\n            limits: {\r\n                files: 1,\r\n                fileSize: StorageConfig.photoMaxFileSize,\r\n            },\r\n        })\r\n    )\r\n    async uploadPhoto(\r\n        @Param('id') articleId: number,\r\n        @UploadedFile() photo,\r\n        @Req() req\r\n        ): Promise<ApiResponse | Photo> {\r\n           if (req.fileFilterError){\r\n               return new ApiResponse ('error', -4002, req.fileFilterError);\r\n           }\r\n\r\n           if(!photo){\r\n                return new ApiResponse('error', -4002, 'File not uploaded!');\r\n\r\n           }\r\n\r\n           \r\n\r\n           const fileTypeResult = await fileType.fromFile(photo.path);\r\n           if(!fileTypeResult) {\r\n                fs.unlinkSync(photo.path);\r\n                return new ApiResponse('error', -4002, 'Cannot detect file type!');\r\n           }\r\n\r\n           const realMimeType = fileTypeResult.mime;\r\n           if (!(realMimeType.includes('jpeg') || realMimeType.includes('png'))){\r\n               fs.unlinkSync(photo.path);\r\n               \r\n               return new ApiResponse('error', -4002, 'Bad file content type!');\r\n\r\n           }\r\n        await this.createThumb(photo);\r\n        await this.createSmallImage(photo);\r\n        \r\n\r\n        const newPhoto: Photo = new Photo();\r\n\r\n        newPhoto.articleId = articleId;\r\n        newPhoto.imagePath = photo.filename;\r\n\r\n        const savedPhoto = await this.photoService.add(newPhoto);\r\n        if(!savedPhoto){\r\n            return new ApiResponse('error', -4001)\r\n        }\r\n        return savedPhoto;\r\n\r\n    }\r\n\r\n\r\n    async createThumb(photo) {\r\n        const originalFilePath = photo.path;\r\n        const fileName = photo.filename;\r\n\r\n        const destinationFilePath = StorageConfig.photoDestination + \"thumb/\" + fileName;\r\n\r\n        await sharp(originalFilePath)\r\n            .resize({\r\n                fit: 'cover',\r\n                width: StorageConfig.photoThumbSize.width,\r\n                height: StorageConfig.photoThumbSize.height,\r\n                background: {\r\n                    r: 255, g: 255, b: 255, alpha: 0.0\r\n                }\r\n            })\r\n            .toFile(destinationFilePath);\r\n\r\n\r\n    }\r\n\r\n    async createSmallImage(photo) {\r\n        const originalFilePath = photo.path;\r\n        const fileName = photo.filename;\r\n\r\n        const destinationFilePath = StorageConfig.photoDestination + \"small/\" + fileName;\r\n\r\n        await sharp(originalFilePath)\r\n            .resize({\r\n                fit: 'contain',\r\n                width: StorageConfig.photoSmallSize.width,\r\n                height: StorageConfig.photoSmallSize.height,\r\n                background: {\r\n                    r: 255, g: 255, b: 255, alpha: 0.0\r\n                }\r\n            })\r\n            .toFile(destinationFilePath);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}