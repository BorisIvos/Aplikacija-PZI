{"version":3,"sources":["article.controller.ts"],"names":["common_1","require","platform_express_1","crud_1","article_entity_1","multer_1","storage_config_1","photo_entity_1","api_response_class_1","fileType","fs","sharp","allow_to_roles_descriptor_1","role_checker_guard_1","ArticleController","service","photoService","this","prototype","createFullArticle","data","editFullArticle","id","uploadPhoto","articleId","photo","req","Promise","fileFilterError","ApiResponse","fromFile","path","fileTypeResult","_a","sent","realMimeType","mime","includes","createResizedImage","StorageConfig","resize","thumb","unlinkSync","small","newPhoto","Photo","imagePath","filename","add","savedPhoto","resizedSettings","originalFilePath","fileName","destinationFilePath","destination","directory","fit","width","height","toFile","deltePhoto","photoId","findOne","e","deleteById","affected","__decorate","Post","UseGuards","RoleCheckGuard","AllowToRoles","__param","Body","Patch","Param","UseInterceptors","FileInterceptor","storage","diskStorage","file","callback","normalized","originalname","replace","sada","Date","datePart","getFullYear","toString","getMonth","getDate","Array","fill","map","Math","random","toFixed","join","toLocaleLowerCase","fileFilter","toLowerCase","match","mimetype","limits","files","fileSize","maxSize","UploadedFile","Req","Delete","Controller","Crud","model","type","Article","params","field","primary","query","category","eager","photos","articlePrices","articleFeatures","features","routes","exclude","number","Error","exports"],"mappings":"y2DAAA,IAAAA,SAAAC,QAAA,kBACAC,mBAAAD,QAAA,4BACAE,OAAAF,QAAA,iBACAG,iBAAAH,QAAA,+BAGAI,SAAAJ,QAAA,UACAK,iBAAAL,QAAA,yBAEAM,eAAAN,QAAA,6BACAO,qBAAAP,QAAA,+BACAQ,SAAAR,QAAA,aACAS,GAAAT,QAAA,MACAU,MAAAV,QAAA,SAIAW,4BAAAX,QAAA,sCACAY,qBAAAZ,QAAA,+BA8CAa,kBAAA,WACI,SAAAA,EAAmBC,EACAC,GADAC,KAAAF,QAAAA,EACAE,KAAAD,aAAAA,EA2KvB,OApKIF,EAAAI,UAAAC,kBAAA,SAA0BC,GACtB,OAAOH,KAAKF,QAAQI,kBAAkBC,IAM1CN,EAAAI,UAAAG,gBAAA,SAA6BC,EAAmBF,GAC5C,OAAOH,KAAKF,QAAQM,gBAAgBC,EAAIF,IAwDtCN,EAAAI,UAAAK,YAAN,SACiBC,EACGC,EACTC,gCACJC,QAAO,kFACP,OAAID,EAAIE,gBACJ,CAAA,EAAO,IAAIpB,qBAAAqB,YAAa,SAAU,KAAMH,EAAIE,kBAG5CH,EAOmB,CAAA,EAAMhB,SAASqB,SAASL,EAAMM,OANhD,CAAA,EAAO,IAAIvB,qBAAAqB,YAAY,SAAU,KAAM,8BAO5C,OADMG,EAAiBC,EAAAC,SAMjBC,EAAeH,EAAeI,MACjBC,SAAS,SAAWF,EAAaE,SAAS,OAMhE,CAAA,EAAMpB,KAAKqB,mBAAmBb,EAAOnB,iBAAAiC,cAAcd,MAAMe,OAAOC,SALzD/B,GAAGgC,WAAWjB,EAAMM,MAEpB,CAAA,EAAO,IAAIvB,qBAAAqB,YAAY,SAAU,KAAM,6BARtCnB,GAAGgC,WAAWjB,EAAMM,MACpB,CAAA,EAAO,IAAIvB,qBAAAqB,YAAY,SAAU,KAAM,qCAW/C,OADAI,EAAAC,OACA,CAAA,EAAMjB,KAAKqB,mBAAmBb,EAAOnB,iBAAAiC,cAAcd,MAAMe,OAAOG,eAQ7C,OARnBV,EAAAC,QAGMU,EAAkB,IAAIrC,eAAAsC,OAEnBrB,UAAYA,EACrBoB,EAASE,UAAYrB,EAAMsB,SAER,CAAA,EAAM9B,KAAKD,aAAagC,IAAIJ,WAC/C,OADMK,EAAahB,EAAAC,QAInB,CAAA,EAAOe,GAFH,CAAA,EAAO,IAAIzC,qBAAAqB,YAAY,SAAU,aAKnCf,EAAAI,UAAAoB,mBAAN,SAAyBb,EAAOyB,uHAS5B,OARMC,EAAmB1B,EAAMM,KACzBqB,EAAW3B,EAAMsB,SAEjBM,EACN/C,iBAAAiC,cAAcd,MAAM6B,YACpBJ,EAAgBK,UAChBH,EAEA,CAAA,EAAMzC,MAAMwC,GACPX,OAAO,CACJgB,IAAK,QACLC,MAAOP,EAAgBzB,MAAMe,OAAOiB,MACpCC,OAAQR,EAAgBzB,MAAMe,OAAOkB,SAGxCC,OAAON,kBAPZpB,EAAAC,iBAcSpB,EAAAI,UAAA0C,WAAb,SACwBpC,EACFqC,mHAEJ,MAAA,CAAA,EAAM5C,KAAKD,aAAa8C,QAAQ,CAC1CtC,UAAWA,EACXqC,QAASA,YAIb,KANMpC,EAAQQ,EAAAC,QAOV,MAAA,CAAA,EAAO,IAAI1B,qBAAAqB,YAAY,SAAU,KAAM,oBAG3C,IACAnB,GAAGgC,WAAWpC,iBAAAiC,cAAcd,MAAM6B,YAAc7B,EAAMqB,WACtDpC,GAAGgC,WAAWpC,iBAAAiC,cAAcd,MAAM6B,YACpBhD,iBAAAiC,cAAcd,MAAMe,OAAOC,MAAMc,UACjC9B,EAAMqB,WACpBpC,GAAGgC,WAAWpC,iBAAAiC,cAAcd,MAAM6B,YACpBhD,iBAAAiC,cAAcd,MAAMe,OAAOG,MAAMY,UACjC9B,EAAMqB,WACjB,MAAMiB,IACW,MAAA,CAAA,EAAM9C,KAAKD,aAAagD,WAAWH,WAExD,OAA8B,IAFT5B,EAAAC,OAEJ+B,SACb,CAAA,EAAO,IAAIzD,qBAAAqB,YAAY,SAAU,KAAM,qBAG3C,CAAA,EAAO,IAAIrB,qBAAAqB,YAAY,KAAM,EAAG,6BAjKnCqC,WAAA,CAHClE,SAAAmE,KAAK,cACLnE,SAAAoE,UAAUvD,qBAAAwD,gBACVzD,4BAAA0D,aAAa,iBACKC,QAAA,EAAAvE,SAAAwE,0CAOnBN,WAAA,CAHClE,SAAAyE,MAAM,OACNzE,SAAAoE,UAAUvD,qBAAAwD,gBACVzD,4BAAA0D,aAAa,iBACGC,QAAA,EAAAvE,SAAA0E,MAAM,OAAkBH,QAAA,EAAAvE,SAAAwE,wCAyDzCN,WAAA,CArDClE,SAAAmE,KAAK,oBACLnE,SAAAoE,UAAUvD,qBAAAwD,gBACVzD,4BAAA0D,aAAa,iBACbtE,SAAA2E,gBACGzE,mBAAA0E,gBAAgB,QAAS,CACrBC,QAASxE,SAAAyE,YAAY,CACjBxB,YAAahD,iBAAAiC,cAAcd,MAAM6B,YACjCP,SAAU,SAACrB,EAAKqD,EAAMC,GAClB,IAEIC,EAFmBF,EAAKG,aAEFC,QAAQ,OAAQ,KAC1CF,EAAaA,EAAWE,QAAQ,iBAAkB,IAClD,IAAIC,EAAO,IAAIC,KACXC,EAAW,GACfA,GAAYF,EAAKG,cAAcC,WAC/BF,IAAaF,EAAKK,WAAa,GAAGD,WAGlC,IAMIpC,GARJkC,GAAYF,EAAKM,UAAUF,YAQD,IALtB,IAAIG,MAAM,IACLC,KAAK,GACLC,IAAI,SAAA9B,GAAK,OAAiB,EAAhB+B,KAAKC,UAAcC,QAAQ,GAAGR,aACxCS,KAAK,IAE+B,IAAMhB,EAGnDD,EAAS,KAFT5B,EAAWA,EAAS8C,wBAK5BC,WAAY,SAACzE,EAAKqD,EAAMC,GAEfD,EAAKG,aAAakB,cAAcC,MAAM,gBAOrCtB,EAAKuB,SAASjE,SAAS,SAAW0C,EAAKuB,SAASjE,SAAS,OAM/D2C,EAAS,MAAM,GAJXA,EAAS,OADTtD,EAAIE,gBAAkB,2BANtBoD,EAAS,OADTtD,EAAIE,gBAAkB,yBAc9B2E,OAAQ,CACJC,MAAO,EACPC,SAAUnG,iBAAAiC,cAAcd,MAAMiF,YAKrCnC,QAAA,EAAAvE,SAAA0E,MAAM,OACNH,QAAA,EAAAvE,SAAA2G,gBACApC,QAAA,EAAAvE,SAAA4G,mCAiEL1C,WAAA,CAHClE,SAAA6G,OAAO,kCACP7G,SAAAoE,UAAUvD,qBAAAwD,gBACVzD,4BAAA0D,aAAa,iBAETC,QAAA,EAAAvE,SAAA0E,MAAM,cACNH,QAAA,EAAAvE,SAAA0E,MAAM,uCA/IF5D,EAAiBoD,WAAA,CA1C7BlE,SAAA8G,WAAW,eACX3G,OAAA4G,KAAK,CACFC,MAAO,CACHC,KAAM7G,iBAAA8G,SAEVC,OAAQ,CACJ7F,GAAI,CACA8F,MAAO,aACPH,KAAM,SACNI,SAAS,IAGjBC,MAAO,CACHrB,KAAM,CACFsB,SAAU,CACNC,OAAO,GAEXC,OAAQ,CACJD,OAAO,GAEXE,cAAe,CACXF,OAAO,GAEXG,gBAAiB,CACbH,OAAO,GAEXI,SAAU,CACNJ,OAAO,KAOlBK,OAAQ,CACLC,QAAS,CAAC,gBAAiB,iBAAkB,qBAOxChH,GAAb,GAgLA,SAASkD,WAAW1C,EAASyG,GACzB,MAAM,IAAIC,MAAM,6BAjLPC,QAAAnH,kBAAAA","file":"article.controller.min.js","sourcesContent":["import { Body, Controller, Delete, Param, Patch, Post, Req, UploadedFile, UseGuards, UseInterceptors } from \"@nestjs/common\";\r\nimport { FileInterceptor } from \"@nestjs/platform-express\";\r\nimport { Crud } from \"@nestjsx/crud\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { AddArticleDto } from \"src/dtos/article/add.article.dto\";\r\nimport { ArticleService } from \"src/services/article/article.service\";\r\nimport { diskStorage} from \"multer\";\r\nimport { StorageConfig } from \"config/storage.config\";\r\nimport { PhotoService } from \"src/services/photo/photo.services\";\r\nimport { Photo } from \"src/entities/photo.entity\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport * as fileType from 'file-type';\r\nimport * as fs from 'fs';\r\nimport * as sharp from 'sharp';\r\nimport { DeleteResult } from \"typeorm\";\r\nimport { EditArticleDto } from \"src/dtos/article/edit.article.dtos\";\r\n\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\nimport { RoleCheckGuard } from \"src/misc/role.checker.guard\";\r\n\r\n\r\n\r\n@Controller('api/article')\r\n@Crud({\r\n    model: {\r\n        type: Article\r\n    },\r\n    params: {\r\n        id: {\r\n            field: 'article_Id',\r\n            type: 'number',\r\n            primary: true\r\n        }\r\n    },\r\n    query: {\r\n        join: {\r\n            category: {\r\n                eager: true\r\n            },\r\n            photos: {\r\n                eager: true\r\n            },\r\n            articlePrices: {\r\n                eager: true\r\n            },\r\n            articleFeatures: {\r\n                eager: true\r\n            },\r\n            features: {\r\n                eager: true\r\n            }\r\n            \r\n           \r\n         }\r\n     },\r\n\r\n     routes: {\r\n        exclude: ['updateOneBase', 'replaceOneBase', 'deleteOneBase'],\r\n     },\r\n\r\n\r\n })\r\n\r\n    \r\nexport class ArticleController {\r\n    constructor(public service: ArticleService,\r\n                public photoService: PhotoService,\r\n                                \r\n        ) { }\r\n    \r\n    @Post('createFull')  //Post http://localhost:3000/api/article/createFull/\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    createFullArticle(@Body() data: AddArticleDto){\r\n        return this.service.createFullArticle(data);\r\n    }\r\n\r\n    @Patch(':id')    //PATCH http://localhost:3000/api/article/2/\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    editFullArticle(@Param('id') id:number, @Body() data: EditArticleDto) {\r\n        return this.service.editFullArticle(id, data);\r\n    }\r\n\r\n    @Post(':id/uploadPhoto/') // POST http://localhost:3000/api/article/:id/uploadPhoto\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    @UseInterceptors(\r\n        FileInterceptor('photo', {\r\n            storage: diskStorage({\r\n                destination: StorageConfig.photo.destination,\r\n                filename: (req, file, callback) => {\r\n                    let original: string = file.originalname;\r\n\r\n                    let normalized = original.replace(/\\s+/g, '-');\r\n                    normalized = normalized.replace(/[^A-z0-9\\.\\-]/g, '');\r\n                    let sada = new Date();\r\n                    let datePart = '';\r\n                    datePart += sada.getFullYear().toString();\r\n                    datePart += (sada.getMonth() + 1).toString();\r\n                    datePart += sada.getDate().toString();\r\n\r\n                    let randomPart: string =\r\n                        new Array(10)\r\n                            .fill(0)\r\n                            .map(e => (Math.random() * 9).toFixed(0).toString())\r\n                            .join('');\r\n\r\n                    let fileName = datePart + '-' + randomPart + '-' + normalized;\r\n                    fileName = fileName.toLocaleLowerCase();\r\n\r\n                    callback(null, fileName);\r\n                }\r\n            }),\r\n            fileFilter: (req, file, callback) => {\r\n                // 1. Check ekstenzije: JPG, PNG\r\n                if (!file.originalname.toLowerCase().match(/\\.(jpg|png)$/)) {\r\n                    req.fileFilterError = 'Bad file extension!';\r\n                    callback(null, false);\r\n                    return;\r\n                }\r\n\r\n                // 2. Check tipa sadrzaja: image/jpeg, image/png (mimetype)\r\n                if (!(file.mimetype.includes('jpeg') || file.mimetype.includes('png'))) {\r\n                    req.fileFilterError = 'Bad file content type!';\r\n                    callback(null, false);\r\n                    return;\r\n                }\r\n\r\n                callback(null, true);\r\n            },\r\n            limits: {\r\n                files: 1,\r\n                fileSize: StorageConfig.photo.maxSize,\r\n            },\r\n        })\r\n    )\r\n    async uploadPhoto(\r\n        @Param('id') articleId: number,\r\n        @UploadedFile() photo,\r\n        @Req() req\r\n        ): Promise<ApiResponse | Photo> {\r\n           if (req.fileFilterError){\r\n               return new ApiResponse ('error', -4002, req.fileFilterError);\r\n           }\r\n\r\n           if(!photo){\r\n                return new ApiResponse('error', -4002, 'File not uploaded!');\r\n\r\n           }\r\n\r\n           \r\n\r\n           const fileTypeResult = await fileType.fromFile(photo.path);\r\n           if(!fileTypeResult) {\r\n                fs.unlinkSync(photo.path);\r\n                return new ApiResponse('error', -4002, 'Cannot detect file type!');\r\n           }\r\n\r\n           const realMimeType = fileTypeResult.mime;\r\n           if (!(realMimeType.includes('jpeg') || realMimeType.includes('png'))){\r\n               fs.unlinkSync(photo.path);\r\n               \r\n               return new ApiResponse('error', -4002, 'Bad file content type!');\r\n\r\n           }\r\n        await this.createResizedImage(photo, StorageConfig.photo.resize.thumb)\r\n        await this.createResizedImage(photo, StorageConfig.photo.resize.small)\r\n        \r\n\r\n        const newPhoto: Photo = new Photo();\r\n\r\n        newPhoto.articleId = articleId;\r\n        newPhoto.imagePath = photo.filename;\r\n\r\n        const savedPhoto = await this.photoService.add(newPhoto);\r\n        if(!savedPhoto){\r\n            return new ApiResponse('error', -4001)\r\n        }\r\n        return savedPhoto;\r\n\r\n    }\r\n    async createResizedImage(photo, resizedSettings) {\r\n        const originalFilePath = photo.path;\r\n        const fileName = photo.filename;\r\n\r\n        const destinationFilePath =\r\n        StorageConfig.photo.destination +\r\n        resizedSettings.directory +\r\n        fileName;\r\n\r\n        await sharp(originalFilePath)\r\n            .resize({\r\n                fit: 'cover',\r\n                width: resizedSettings.photo.resize.width,\r\n                height: resizedSettings.photo.resize.height,\r\n               \r\n            })\r\n            .toFile(destinationFilePath);\r\n\r\n    }\r\n   // http://localhost:3000/api/article/1/deltePhoto/45/\r\n    @Delete(':articleId/deltePhoto/:photoId')\r\n    @UseGuards(RoleCheckGuard)\r\n    @AllowToRoles('administrator')\r\n    public async deltePhoto(\r\n        @Param('articleId') articleId: number,\r\n        @Param('photoId') photoId: number,\r\n    ) {\r\n        const photo = await this.photoService.findOne({\r\n            articleId: articleId,\r\n            photoId: photoId\r\n\r\n        });\r\n\r\n        if (!photo){\r\n            return new ApiResponse('error', -4004, 'Photo not found');\r\n\r\n        }\r\n        try{ \r\n        fs.unlinkSync(StorageConfig.photo.destination + photo.imagePath);\r\n        fs.unlinkSync(StorageConfig.photo.destination +\r\n                      StorageConfig.photo.resize.thumb.directory + \r\n                      photo.imagePath);\r\n        fs.unlinkSync(StorageConfig.photo.destination +\r\n                      StorageConfig.photo.resize.small.directory + \r\n                      photo.imagePath);\r\n         } catch(e) {}\r\n       const deleteResult = await this.photoService.deleteById(photoId);\r\n\r\n       if (deleteResult.affected === 0) {\r\n           return new ApiResponse('error', -4004, 'Photo not found!');\r\n        }\r\n\r\n       return new ApiResponse('ok', 0, 'One photo deleted!');\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction deleteById(id: any, number: any) {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n\r\n"]}