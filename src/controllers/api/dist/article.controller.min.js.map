{"version":3,"sources":["article.controller.ts"],"names":["common_1","require","platform_express_1","crud_1","article_entity_1","multer_1","storage_config_1","photo_entity_1","api_response_class_1","fileType","fs","sharp","ArticleController","service","photoService","this","prototype","createFullArticle","data","uploadPhoto","articleId","photo","req","Promise","fileFilterError","ApiResponse","fromFile","path","fileTypeResult","_a","sent","realMimeType","mime","includes","createResizedImage","StorageConfig","resize","thumb","unlinkSync","small","newPhoto","Photo","imagePath","filename","add","savedPhoto","resizedSettings","originalFilePath","fileName","destinationFilePath","destination","directory","fit","width","height","toFile","__decorate","Post","__param","Body","UseInterceptors","FileInterceptor","storage","diskStorage","file","callback","normalized","originalname","replace","sada","Date","datePart","getFullYear","toString","getMonth","getDate","Array","fill","map","e","Math","random","toFixed","join","toLocaleLowerCase","fileFilter","toLowerCase","match","mimetype","limits","files","fileSize","maxSize","Param","UploadedFile","Req","Controller","Crud","model","type","Article","params","id","field","primary","query","category","eager","photos","articlePrices","articleFeatures","features","exports"],"mappings":"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","file":"article.controller.min.js","sourcesContent":["import { Body, Controller, Param, Post, Req, UploadedFile, UseInterceptors } from \"@nestjs/common\";\r\nimport { FileInterceptor } from \"@nestjs/platform-express\";\r\nimport { Crud } from \"@nestjsx/crud\";\r\nimport { Article } from \"src/entities/article.entity\";\r\nimport { AddArticleDto } from \"src/dtos/article/add.article.dto\";\r\nimport { ArticleService } from \"src/services/article/article.service\";\r\nimport { diskStorage} from \"multer\";\r\nimport { StorageConfig } from \"config/storage.config\";\r\nimport { PhotoService } from \"src/services/photo/photo.services\";\r\nimport { Photo } from \"src/entities/photo.entity\";\r\nimport { ApiResponse } from \"src/misc/api.response.class\";\r\nimport * as fileType from 'file-type';\r\nimport * as fs from 'fs';\r\nimport * as sharp from 'sharp';\r\n\r\n\r\n\r\n@Controller('api/article')\r\n@Crud({\r\n    model: {\r\n        type: Article\r\n    },\r\n    params: {\r\n        id: {\r\n            field: 'articleId',\r\n            type: 'number',\r\n            primary: true\r\n        }\r\n    },\r\n    query: {\r\n        join: {\r\n            category: {\r\n                eager: true\r\n            },\r\n            photos: {\r\n                eager: true\r\n            },\r\n            articlePrices: {\r\n                eager: true\r\n            },\r\n            articleFeatures: {\r\n                eager: true\r\n            },\r\n            features: {\r\n                eager: true\r\n            }\r\n            \r\n           \r\n            }\r\n        }\r\n         })\r\n    \r\nexport class ArticleController {\r\n    constructor(public service: ArticleService,\r\n                public photoService: PhotoService,\r\n                                \r\n        ) { }\r\n\r\n    @Post('createFull')  //Post http://localhost:3000/api/article/createFull/\r\n    createFullArticle(@Body() data: AddArticleDto){\r\n        return this.service.createFullArticle(data);\r\n    }\r\n\r\n    @Post(':id/uploadPhoto/') // POST http://localhost:3000/api/article/:id/uploadPhoto\r\n    @UseInterceptors(\r\n        FileInterceptor('photo', {\r\n            storage: diskStorage({\r\n                destination: StorageConfig.photo.destination,\r\n                filename: (req, file, callback) => {\r\n                    let original: string = file.originalname;\r\n\r\n                    let normalized = original.replace(/\\s+/g, '-');\r\n                    normalized = normalized.replace(/[^A-z0-9\\.\\-]/g, '');\r\n                    let sada = new Date();\r\n                    let datePart = '';\r\n                    datePart += sada.getFullYear().toString();\r\n                    datePart += (sada.getMonth() + 1).toString();\r\n                    datePart += sada.getDate().toString();\r\n\r\n                    let randomPart: string =\r\n                        new Array(10)\r\n                            .fill(0)\r\n                            .map(e => (Math.random() * 9).toFixed(0).toString())\r\n                            .join('');\r\n\r\n                    let fileName = datePart + '-' + randomPart + '-' + normalized;\r\n                    fileName = fileName.toLocaleLowerCase();\r\n\r\n                    callback(null, fileName);\r\n                }\r\n            }),\r\n            fileFilter: (req, file, callback) => {\r\n                // 1. Check ekstenzije: JPG, PNG\r\n                if (!file.originalname.toLowerCase().match(/\\.(jpg|png)$/)) {\r\n                    req.fileFilterError = 'Bad file extension!';\r\n                    callback(null, false);\r\n                    return;\r\n                }\r\n\r\n                // 2. Check tipa sadrzaja: image/jpeg, image/png (mimetype)\r\n                if (!(file.mimetype.includes('jpeg') || file.mimetype.includes('png'))) {\r\n                    req.fileFilterError = 'Bad file content type!';\r\n                    callback(null, false);\r\n                    return;\r\n                }\r\n\r\n                callback(null, true);\r\n            },\r\n            limits: {\r\n                files: 1,\r\n                fileSize: StorageConfig.photo.maxSize,\r\n            },\r\n        })\r\n    )\r\n    async uploadPhoto(\r\n        @Param('id') articleId: number,\r\n        @UploadedFile() photo,\r\n        @Req() req\r\n        ): Promise<ApiResponse | Photo> {\r\n           if (req.fileFilterError){\r\n               return new ApiResponse ('error', -4002, req.fileFilterError);\r\n           }\r\n\r\n           if(!photo){\r\n                return new ApiResponse('error', -4002, 'File not uploaded!');\r\n\r\n           }\r\n\r\n           \r\n\r\n           const fileTypeResult = await fileType.fromFile(photo.path);\r\n           if(!fileTypeResult) {\r\n                fs.unlinkSync(photo.path);\r\n                return new ApiResponse('error', -4002, 'Cannot detect file type!');\r\n           }\r\n\r\n           const realMimeType = fileTypeResult.mime;\r\n           if (!(realMimeType.includes('jpeg') || realMimeType.includes('png'))){\r\n               fs.unlinkSync(photo.path);\r\n               \r\n               return new ApiResponse('error', -4002, 'Bad file content type!');\r\n\r\n           }\r\n        await this.createResizedImage(photo, StorageConfig.photo.resize.thumb)\r\n        await this.createResizedImage(photo, StorageConfig.photo.resize.small)\r\n        \r\n\r\n        const newPhoto: Photo = new Photo();\r\n\r\n        newPhoto.articleId = articleId;\r\n        newPhoto.imagePath = photo.filename;\r\n\r\n        const savedPhoto = await this.photoService.add(newPhoto);\r\n        if(!savedPhoto){\r\n            return new ApiResponse('error', -4001)\r\n        }\r\n        return savedPhoto;\r\n\r\n    }\r\n    async createResizedImage(photo, resizedSettings) {\r\n        const originalFilePath = photo.path;\r\n        const fileName = photo.filename;\r\n\r\n        const destinationFilePath =\r\n        StorageConfig.photo.destination +\r\n        resizedSettings.directory +\r\n        fileName;\r\n\r\n        await sharp(originalFilePath)\r\n            .resize({\r\n                fit: 'cover',\r\n                width: resizedSettings.photo.resize.width,\r\n                height: resizedSettings.photo.resize.height,\r\n               \r\n            })\r\n            .toFile(destinationFilePath);\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}