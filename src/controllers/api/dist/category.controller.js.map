{"version":3,"sources":["category.controller.ts"],"names":[],"mappings":";;;;;;;;AAAA,yCAAuD;AACvD,gEAAwD;AACxD,sCAAqC;AAErC,kEAA6D;AAC7D,gFAAkE;AAqElE;IACI,4BAAmB,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;IAAI,CAAC;IADvC,kBAAkB;QAlE9B,mBAAU,CAAC,cAAc,CAAC;QAC1B,WAAI,CAAC;YACF,KAAK,EAAE;gBACH,IAAI,EAAE,0BAAQ;aACjB;YACD,MAAM,EAAE;gBACJ,EAAE,EAAE;oBACA,KAAK,EAAE,YAAY;oBACnB,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE,IAAI;iBAChB;aACJ;YACD,KAAK,EAAE;gBACH,IAAI,EAAE;oBACF,UAAU,EAAE;wBACR,KAAK,EAAE,IAAI;qBACd;oBACD,QAAQ,EAAE;wBACN,KAAK,EAAE,IAAI;qBACd;oBACD,cAAc,EAAE;wBACZ,KAAK,EAAE,KAAK;qBACf;oBACD,QAAQ,EAAE;wBACN,KAAK,EAAE,KAAK;qBACf;iBACJ;aACC;YACD,MAAM,EAAE;gBACL,IAAI,EAAE;oBACF,eAAe;oBACf,gBAAgB;oBAChB,aAAa;oBACb,YAAY;oBACZ,eAAe;iBAClB;gBACD,aAAa,EAAE;oBACX,UAAU,EAAE;wBACR,kBAAS,CAAC,mCAAc,CAAC;wBACzB,wCAAY,CAAC,eAAe,CAAC;qBAEhC;iBACJ;gBACD,cAAc,EAAE;oBACZ,UAAU,EAAE;wBACR,kBAAS,CAAC,mCAAc,CAAC;wBACzB,wCAAY,CAAC,eAAe,CAAC;qBAChC;iBAEJ;gBACD,aAAa,EAAE;oBACX,UAAU,EAAE;wBACR,kBAAS,CAAC,mCAAc,CAAC;wBACzB,wCAAY,CAAC,eAAe,CAAC;qBAChC;iBAEJ;gBACD,WAAW,EAAE;oBACT,UAAU,EAAE;wBACR,kBAAS,CAAC,mCAAc,CAAC;wBACzB,wCAAY,CAAC,eAAe,EAAE,MAAM,CAAE;qBACzC;iBACJ;aACJ;SAEJ,CAAC;OACO,kBAAkB,CAE9B;IAAD,yBAAC;CAFD,AAEC,IAAA;AAFY,gDAAkB","file":"category.controller.js","sourcesContent":["import { Controller, UseGuards } from \"@nestjs/common\";\r\nimport { Category } from \"src/entities/category.entity\";\r\nimport { Crud } from \"@nestjsx/crud\";\r\nimport { CategoryService } from \"src/services/administrator/category/category.service\";\r\nimport { RoleCheckGuard } from \"src/misc/role.checker.guard\";\r\nimport { AllowToRoles } from \"src/misc/allow.to.roles.descriptor\";\r\n\r\n\r\n@Controller('api/category')\r\n@Crud({\r\n    model: {\r\n        type: Category\r\n    },\r\n    params: {\r\n        id: {\r\n            field: 'categoryId',\r\n            type: 'number',\r\n            primary: true\r\n        }\r\n    },\r\n    query: {\r\n        join: {\r\n            categories: {\r\n                eager: true\r\n            },\r\n            features: {\r\n                eager: true\r\n            },\r\n            parentCategory: {\r\n                eager: false\r\n            },\r\n            articles: {\r\n                eager: false\r\n            }\r\n        }\r\n         },\r\n         routes: {\r\n            only: [\r\n                \"createOneBase\",\r\n                \"createManyBase\",\r\n                \"getManyBase\",\r\n                \"getOneBase\",\r\n                \"updateOneBase\",\r\n            ],\r\n            createOneBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckGuard),\r\n                    AllowToRoles('administrator'),\r\n    \r\n                ],\r\n            },\r\n            createManyBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckGuard),\r\n                    AllowToRoles('administrator'),\r\n                ],\r\n                \r\n            },\r\n            updateOneBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckGuard),\r\n                    AllowToRoles('administrator'),\r\n                ],\r\n    \r\n            },\r\n            getManyBase: {\r\n                decorators: [\r\n                    UseGuards(RoleCheckGuard),\r\n                    AllowToRoles('administrator', 'user',)\r\n                ],\r\n            },\r\n        }\r\n        \r\n    })\r\nexport class CategoryController {\r\n    constructor(public service: CategoryService) { }\r\n}\r\n\r\n\r\n"]}